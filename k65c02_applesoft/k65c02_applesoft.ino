////////////////////////////////////////////////////////////////////
// RetroShield 6502 for Arduino Mega
// Apple I
//
// 2019/01/28
// Version 0.1

// The MIT License (MIT)

// Copyright (c) 2019 Erturk Kocalar, 8Bitforce.com

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

////////////////////////////////////////////////////////////////////
// Options
//   USE_SPI_RAM: Enable Microchip 128KB SPI-RAM  (Details coming up)
//   USE_LCD_KEYPAD: Enable LCD/Keyboard Shield
//   outputDEBUG: Print memory access debugging messages.
////////////////////////////////////////////////////////////////////
#define USE_SPI_RAM     0
#define USE_LCD_KEYPAD  0
#define outputDEBUG     0

////////////////////////////////////////////////////////////////////
// include the library code for LCD shield:
////////////////////////////////////////////////////////////////////
#include <avr/pgmspace.h>


////////////////////////////////////////////////////////////////////
// SPI FUNCTIONS
//
// 23L1024 SPI RAM (128K)
// $00000 - $1FFFF
////////////////////////////////////////////////////////////////////
#if (USE_SPI_RAM)

#include "pins2_arduino.h"
#include <DIO2.h>

GPIO_pin_t LED1          = DPA4;
GPIO_pin_t LED2          = DPA5;

GPIO_pin_t PIN_SIO3      = DPA3;
GPIO_pin_t PIN_SIO2      = DPA2;
GPIO_pin_t PIN_SIO1      = DPA1;
GPIO_pin_t PIN_SIO0      = DPA0;
GPIO_pin_t PIN_HOLD      = DP7;
GPIO_pin_t PIN_SCK       = DP6;
GPIO_pin_t PIN_SI        = DP5;
GPIO_pin_t PIN_SO        = DP3;
GPIO_pin_t PIN_CS        = DP2;

inline __attribute__((always_inline))
void spi_reset()
{
  digitalWrite2f(PIN_CS, LOW);
  spi_send(0xFF);
  digitalWrite2f(PIN_CS, HIGH);
}

inline __attribute__((always_inline))
byte spi_get_mode()
{
  byte mode;
  
  digitalWrite2f(PIN_CS, LOW);
  spi_send(0x05);
  mode = spi_receive();
  digitalWrite2f(PIN_CS, HIGH);
  return mode;
}

inline __attribute__((always_inline))
byte spi_set_mode(byte mode)
{
  digitalWrite2f(PIN_CS, LOW);
  spi_send(0x01);
  spi_send(mode);
  digitalWrite2f(PIN_CS, HIGH);
  return mode;
}

inline __attribute__((always_inline))
byte spi_get_mode_quad()
{
  byte mode;
  
  digitalWrite2f(PIN_CS, LOW);
  spi_send_quad(0x05);
  mode = spi_receive_quad();
  digitalWrite2f(PIN_CS, HIGH);
  return mode;
}

inline __attribute__((always_inline))
void spi_enter_quad()
{
  digitalWrite2f(PIN_CS, LOW);
  spi_send(0x38);
  digitalWrite2f(PIN_CS, HIGH);
  pinMode2f(PIN_SI, INPUT_PULLUP);
}

inline __attribute__((always_inline))
void spi_exit_quad()
{
  digitalWrite2f(PIN_CS, LOW);
  spi_send(0xFF);
  digitalWrite2f(PIN_CS, HIGH);
  pinMode2f(PIN_SI, OUTPUT);  digitalWrite2f(PIN_SI, LOW);
}

inline __attribute__((always_inline))
void spi_init()
{
  pinMode2f(PIN_CS,   OUTPUT);  digitalWrite2f(PIN_CS, HIGH);
  pinMode2f(PIN_SCK,  OUTPUT);  digitalWrite2f(PIN_SCK,  LOW);
  pinMode2f(PIN_HOLD, INPUT_PULLUP);
  pinMode2f(PIN_SI,   OUTPUT);  digitalWrite2f(PIN_SI, LOW);
  pinMode2f(PIN_SO,   INPUT_PULLUP);
  pinMode2f(PIN_SIO0, INPUT_PULLUP);
  pinMode2f(PIN_SIO1, INPUT_PULLUP);
  pinMode2f(PIN_SIO2, INPUT_PULLUP);
  pinMode2f(PIN_SIO3, INPUT_PULLUP);

  pinMode2f(LED1, OUTPUT);      digitalWrite2f(LED1, LOW);
  pinMode2f(LED2, OUTPUT);      digitalWrite2f(LED2, HIGH);

  spi_reset();
  spi_set_mode(0x40);   // sequantial mode

  spi_enter_quad();
  Serial.print("\nSPI-RAM -   Quad Mode: ");
  Serial.println(spi_get_mode_quad(), HEX);    
}

inline __attribute__((always_inline))
void spi_send(byte working)         // function to actually bit shift the data byte out
{
  pinMode2f(PIN_SI,   OUTPUT);
  digitalWrite2f(PIN_SI,   LOW);

  for(int i = 1; i <= 8; i++)         // setup a loop of 8 iterations, one for each bit
  {                                         
      if (working > 127)              // test the most significant bit
      { 
          digitalWrite2f(PIN_SI,HIGH);   // if it is a 1 (ie. B1XXXXXXX), set the master out pin high
          // digitalWrite2f(LED2, HIGH);
      } else {
          digitalWrite2f(PIN_SI, LOW);   // if it is not 1 (ie. B0XXXXXXX), set the master out pin low
          // digitalWrite2f(LED2, LOW);
      }
      digitalWrite2f(PIN_SCK,HIGH);        // set clock high, the pot IC will read the bit into its register
      // digitalWrite2f(LED1, HIGH);
      working = working << 1;
      // delay(500);
      digitalWrite2f(PIN_SCK,LOW);          // set clock low, the pot IC will stop reading and prepare for the next iteration (next significant bit
      // digitalWrite2f(LED1, LOW);
      // delay(500);
  }
  pinMode2f(PIN_SI,   INPUT_PULLUP);
}

inline __attribute__((always_inline))
byte spi_receive()
{
  byte din = 0;
  
  for(int i = 1; i <= 8; i++)         // setup a loop of 8 iterations, one for each bit
  {                   
    din = din << 1;                      
    digitalWrite2f (PIN_SCK,HIGH);        // set clock high, the pot IC will read the bit into its register
    if (digitalRead2f(PIN_SO))
      din = din | 1;
    digitalWrite2f(PIN_SCK,LOW);          // set clock low, the pot IC will stop reading and prepare for the next iteration (next significant bit
  }
  return(din);
}

inline __attribute__((always_inline))
void spi_write_byte(byte bank, word addr, byte data)
{
  byte hh = (addr & 0xFF00) >> 8;
  byte ll = addr & 0xFF;
  
  digitalWrite2f(PIN_CS, LOW);
  spi_send(0x02);
  spi_send(bank & 0x01);
  spi_send(hh);
  spi_send(ll);
  spi_send(data);    
  digitalWrite2f(PIN_CS, HIGH);    
}

inline __attribute__((always_inline))
byte spi_read_byte(byte bank, word addr)
{
  byte hh = (addr & 0xFF00) >> 8;
  byte ll = addr & 0xFF;
  byte data;
  
  digitalWrite2f(PIN_CS, LOW);
  spi_send(0x03);
  spi_send(bank & 0x01);
  spi_send(hh);
  spi_send(ll);
  data = spi_receive();    
  digitalWrite2f(PIN_CS, HIGH);
  return data;
}

inline __attribute__((always_inline))
byte spi_read_byte_quad(byte bank, word addr)
{
  byte hh = (addr & 0xFF00) >> 8;
  byte ll = addr & 0xFF;
  byte data;

  digitalWrite2f(PIN_CS, LOW);
  spi_send_quad(0x03);
  spi_send_quad(bank & 0x01);
  spi_send_quad(hh);
  spi_send_quad(ll);
  /* dummy read */ spi_receive_quad();
  data = spi_receive_quad();
  digitalWrite2f(PIN_CS, HIGH);

  // Serial.print("SPI_Read: "); Serial.print(data, HEX); Serial.print(" <- "); Serial.println(addr, HEX);
  return data;
}

inline __attribute__((always_inline))
void spi_write_byte_quad(byte bank, word addr, byte data)
{
  byte hh = (addr & 0xFF00) >> 8;
  byte ll = addr & 0xFF;

  // Serial.print("SPI_Write: "); Serial.print(data, HEX); Serial.print(" -> "); Serial.println(addr, HEX);

  digitalWrite2f(PIN_CS, LOW);
  spi_send_quad(0x02);
  spi_send_quad(bank & 0x01);
  spi_send_quad(hh);
  spi_send_quad(ll);
  spi_send_quad(data);
  digitalWrite2f(PIN_CS, HIGH);
}

inline __attribute__((always_inline))
void spi_read_byte_array_quad(byte bank, word addr, word cnt, byte *ptr)
{
  byte hh = (addr & 0xFF00) >> 8;
  byte ll = addr & 0xFF;
  byte data;
  
  digitalWrite2f(PIN_CS, LOW);
  spi_send_quad(0x03);
  spi_send_quad(bank & 0x01);
  spi_send_quad(hh);
  spi_send_quad(ll);
  /* dummy read */ spi_receive_quad();
  while (cnt--) 
    *ptr++ = spi_receive_quad();
  digitalWrite2f(PIN_CS, HIGH);
}

inline __attribute__((always_inline))
void spi_write_byte_array_quad(byte bank, word addr, word cnt, byte *ptr)
{
  byte hh = (addr & 0xFF00) >> 8;
  byte ll = addr & 0xFF;
  
  digitalWrite2f(PIN_CS, LOW);
  spi_send_quad(0x02);
  spi_send_quad(bank & 0x01);
  spi_send_quad(hh);
  spi_send_quad(ll);
  while (cnt--)
  {
    Serial.print("+"); Serial.print(*ptr, HEX); 
    spi_send_quad(*ptr++);
  }
  Serial.println("");
  digitalWrite2f(PIN_CS, HIGH);
}

inline __attribute__((always_inline))
void spi_send_quad(byte working)         // Quad mode
{
  byte hh = (working & 0xF0) >> 4;
  byte ll = (working & 0x0F);

  // digitalWrite2f(LED1, HIGH);

  pinMode2f(PIN_SIO0, OUTPUT);
  pinMode2f(PIN_SIO1, OUTPUT);
  pinMode2f(PIN_SIO2, OUTPUT);
  pinMode2f(PIN_SIO3, OUTPUT);

  PORTF = (PINF & 0xF0) | hh; 

  digitalWrite2f(PIN_SCK,HIGH);
  digitalWrite2f(PIN_SCK,LOW);

  PORTF = (PINF & 0xF0) | ll; 

  digitalWrite2f(PIN_SCK,HIGH);
  digitalWrite2f(PIN_SCK,LOW);

  pinMode2f(PIN_SIO0, INPUT_PULLUP);
  pinMode2f(PIN_SIO1, INPUT_PULLUP);
  pinMode2f(PIN_SIO2, INPUT_PULLUP);
  pinMode2f(PIN_SIO3, INPUT_PULLUP);

  // digitalWrite2f(LED1, LOW);
}

inline __attribute__((always_inline))
word spi_receive_quad()         // Quad mode
{
  byte b = 0;

  // digitalWrite2f(LED2, HIGH);

  digitalWrite2f(PIN_SCK, HIGH);     
  b = (PINF & 0x0F) << 4;
  digitalWrite2f(PIN_SCK,LOW);
  digitalWrite2f(PIN_SCK,HIGH);
  b = b | (PINF & 0x0F);
  digitalWrite2f(PIN_SCK,LOW);

  // digitalWrite2f(LED2, LOW);

  return(b);
}


////////////////////////////////////////////////////////////////////
// Cache for SPI-RAM
////////////////////////////////////////////////////////////////////

byte cachePage[16];
byte cacheRAM[16][256];

inline __attribute__((always_inline))
byte cache_read_byte(word addr)           // 0x1234
{
//  byte p = (addr & 0xFF00) >> 8;          // p = 0x12
//  byte a = addr & 0x00FF;                 // a = 0x34
//  byte n = a >> 4;                        // n = 0x03
//  byte r = a & 0x0F;                      // r = 0x04

  byte a = (addr & 0xFF00) >> 8;            // a = 0x12
  byte p = a >> 4;                          // p = 0x01
  byte n = a & 0x0F;                        // n = 0x02
  byte r = (addr & 0x00FF);                 // r = 0x34
  
  // Serial.print("cache addr: "); Serial.print(addr, HEX);

  if (cachePage[n] == p)
  {
    // Cache Hit !!!
    return cacheRAM[n][r];
  }
  else
  {
    // Need to fill cache from SPI-RAM
    digitalWrite2f(LED2, HIGH);
    spi_read_byte_array_quad(0, addr & 0xFF00, 256, cacheRAM[n]);
    cachePage[n] = p;
    digitalWrite2f(LED2, LOW);
    return cacheRAM[n][r];
  }
}

inline __attribute__((always_inline))
void cache_write_byte(word addr, byte din)   // 0x1234
{
//  byte p = (addr & 0xFF00) >> 8;          // p = 0x12
//  byte a = addr & 0x00FF;                 // a = 0x34
//  byte n = a >> 4;                        // n = 0x03
//  byte r = a & 0x0f;                      // r = 0x04

  byte a = (addr & 0xFF00) >> 8;            // a = 0x12
  byte p = a >> 4;                          // p = 0x01
  byte n = a & 0x0F;                        // n = 0x02
  byte r = (addr & 0x00FF);                 // r = 0x34

  
  if (cachePage[n] == p)
  {
    // Cache Hit !!!
    cacheRAM[n][r] = din;
    spi_write_byte_quad(0, addr, din);        // Write-thru cache :)
    return;
  }
  else
  {
    // Need to fill cache from SPI-RAM
    digitalWrite2f(LED1, HIGH);
    spi_write_byte_quad(0, addr, din);
    spi_read_byte_array_quad(0, addr & 0xFF00, 256, cacheRAM[n]);
    cachePage[n] = p;
    digitalWrite2f(LED1, LOW);
    return;
  }
}

void cache_init()
{
  // Initialize cache from spi-ram
  for(int p=0; p<16; p++)
  {
    cachePage[p] = 0;
  }
  Serial.println("RAM Cache - Initialized.");

}

#endif


////////////////////////////////////////////////////////////////////
// Configuration
////////////////////////////////////////////////////////////////////
#if USE_LCD_KEYPAD

#include <LiquidCrystal.h>

  /*
    The circuit:
   * LCD RS pin to digital pin 12
   * LCD Enable pin to digital pin 11
   * LCD D4 pin to digital pin 5
   * LCD D5 pin to digital pin 4
   * LCD D6 pin to digital pin 3
   * LCD D7 pin to digital pin 2
   * LCD R/W pin to ground
   * 10K resistor:
   * ends to +5V and ground
   * wiper to LCD VO pin (pin 3)
  */

  #define LCD_RS  8
  #define LCD_EN  9
  #define LCD_D4  4
  #define LCD_D5  5
  #define LCD_D6  6
  #define LCD_D7  7
  #define LCD_BL  10
  #define LCD_BTN  0
  
  #define NUM_KEYS   5
  #define BTN_DEBOUNCE 10
  #define BTN_RIGHT  0
  #define BTN_UP     1
  #define BTN_DOWN   2
  #define BTN_LEFT   3
  #define BTN_SELECT 4
  const int adc_key_val[NUM_KEYS] = { 30, 180, 360, 535, 760 };
  int       key = -1;
  int       oldkey = -1;
  boolean   BTN_PRESS = 0;
  boolean   BTN_RELEASE = 0;

  LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7);
  int backlightSet = 25;
#endif



////////////////////////////////////////////////////////////////////
// 65C02 DEFINITIONS
////////////////////////////////////////////////////////////////////

// 65C02 HW CONSTRAINTS
// 1- RESET_N must be asserted at least 2 clock cycles.
// 2- CLK can not be low more than 5 microseconds.  Can be high indefinitely.
//

// MEMORY LAYOUT
// - Apple 1 BASIC requires 4KB min, so adjust when SPI_RAM not used.
#if (USE_SPI_RAM)
  // 2K MEMORY
  #define RAM_START   0x0000
  #define RAM_END     0x07FF
  byte    RAM[RAM_END-RAM_START+1];
#else
  // 2K MEMORY
  #define RAM_START   0x0000
  #define RAM_END     0x17FF
  byte    RAM[RAM_END-RAM_START+1];
#endif

// ROMs (Monitor + Basic)
#define ROM_START   0xFF00
#define ROM_END     0xFFFF
#define BASIC_START 0x6000
#define BASIC_END   0x7FFF

////////////////////////////////////////////////////////////////////
// Woz Monitor Code
////////////////////////////////////////////////////////////////////
// static const unsigned char 
PROGMEM const unsigned char rom_bin[] = {
// static const unsigned char rom_bin[] = {
    0xd8, 0x58, 0xa0, 0x7f, 0x8c, 0x12, 0xd0, 0xa9, 0xa7, 0x8d, 0x11, 0xd0, 
    0x8d, 0x13, 0xd0, 0xc9, 0xdf, 0xf0, 0x13, 0xc9, 0x9b, 0xf0, 0x03, 0xc8, 
    0x10, 0x0f, 0xa9, 0xdc, 0x20, 0xef, 0xff, 0xa9, 0x8d, 0x20, 0xef, 0xff, 
    0xa0, 0x01, 0x88, 0x30, 0xf6, 0xad, 0x11, 0xd0, 0x10, 0xfb, 0xad, 0x10, 
    0xd0, 0x99, 0x00, 0x02, 0x20, 0xef, 0xff, 0xc9, 0x8d, 0xd0, 0xd4, 0xa0, 
    0xff, 0xa9, 0x00, 0xaa, 0x0a, 0x85, 0x2b, 0xc8, 0xb9, 0x00, 0x02, 0xc9, 
    0x8d, 0xf0, 0xd4, 0xc9, 0xae, 0x90, 0xf4, 0xf0, 0xf0, 0xc9, 0xba, 0xf0, 
    0xeb, 0xc9, 0xd2, 0xf0, 0x3b, 0x86, 0x28, 0x86, 0x29, 0x84, 0x2a, 0xb9, 
    0x00, 0x02, 0x49, 0xb0, 0xc9, 0x0a, 0x90, 0x06, 0x69, 0x88, 0xc9, 0xfa, 
    0x90, 0x11, 0x0a, 0x0a, 0x0a, 0x0a, 0xa2, 0x04, 0x0a, 0x26, 0x28, 0x26, 
    0x29, 0xca, 0xd0, 0xf8, 0xc8, 0xd0, 0xe0, 0xc4, 0x2a, 0xf0, 0x97, 0x24, 
    0x2b, 0x50, 0x10, 0xa5, 0x28, 0x81, 0x26, 0xe6, 0x26, 0xd0, 0xb5, 0xe6, 
    0x27, 0x4c, 0x44, 0xff, 0x6c, 0x24, 0x00, 0x30, 0x2b, 0xa2, 0x02, 0xb5, 
    0x27, 0x95, 0x25, 0x95, 0x23, 0xca, 0xd0, 0xf7, 0xd0, 0x14, 0xa9, 0x8d, 
    0x20, 0xef, 0xff, 0xa5, 0x25, 0x20, 0xdc, 0xff, 0xa5, 0x24, 0x20, 0xdc, 
    0xff, 0xa9, 0xba, 0x20, 0xef, 0xff, 0xa9, 0xa0, 0x20, 0xef, 0xff, 0xa1, 
    0x24, 0x20, 0xdc, 0xff, 0x86, 0x2b, 0xa5, 0x24, 0xc5, 0x28, 0xa5, 0x25, 
    0xe5, 0x29, 0xb0, 0xc1, 0xe6, 0x24, 0xd0, 0x02, 0xe6, 0x25, 0xa5, 0x24, 
    0x29, 0x07, 0x10, 0xc8, 0x48, 0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0xe5, 0xff, 
    0x68, 0x29, 0x0f, 0x09, 0xb0, 0xc9, 0xba, 0x90, 0x02, 0x69, 0x06, 0x2c, 
    0x12, 0xd0, 0x30, 0xfb, 0x8d, 0x12, 0xd0, 0x60, 0x00, 0x00, 0x00, 0x0f, 
    0x00, 0xff, 0x00, 0x00
};

// BASIC ROM starts at E000
// Dump from: http://www.brielcomputers.com/basic_dump.txt

//lyh Applesoft 6000R
PROGMEM const unsigned char basic_bin[] = {0x4c,0xa5,0x7c,0x4c,0xea,0x62,0xcd,0x66,0xdb,0x65,0xa8,0x6a,0x90,0x67,0x63,0x69,0x61,0x6d,0x93,0x69,0x20,0x7d,0x66,0x67,0x29,0x7d,0x49,0x7d,0x6e,0x7d,0xbb,0x7d,0x41,0x68,0x39,0x67,0x0d,0x67,0xc4,0x67,0xa6,0x66,0x1c,0x67,0x66,0x67,0xd7,0x67,0xcb,0x66,0xe7,0x67,0x40,0x74,0xd0,0x68,0xf3,0x66,0x2b,0x65,0xf0,0x64,0x52,0x69,0xcf,0x64,0x35,0x7e,0x9e,0x7e,0xaa,0x7e,0x1d,0x7e,0x35,0x78,0xc5,0x78,0x54,0x78,0x5c,0x70,0x2d,0x7b,0x4c,0x7c,0xeb,0x75,0xa8,0x7b,0x2a,0x74,0x9c,0x73,0x8b,0x70,0xcd,0x73,0xab,0x73,0x0c,0x73,0x20,0x73,0x4c,0x73,0x57,0x73,0x79,0x6a,0x74,0x79,0x53,0x74,0x7b,0x2b,0x76,0x7b,0x0d,0x77,0x7d,0x36,0x7b,0x50,0xe6,0x6c,0x46,0xe0,0x6c,0x7f,0x6e,0x7b,0x7f,0x47,0x6c,0x64,0xf6,0x6c,0x45,0x4e,0xc4,0x46,0x4f,0xd2,0x4e,0x45,0x58,0xd4,0x44,0x41,0x54,0xc1,0x49,0x4e,0x50,0x55,0xd4,0x44,0x49,0xcd,0x52,0x45,0x41,0xc4,0x43,0x41,0x4c,0xcc,0x50,0x4f,0xd0,0x48,0x49,0x4d,0x45,0x4d,0xba,0x4c,0x4f,0x4d,0x45,0x4d,0xba,0x4f,0x4e,0x45,0x52,0xd2,0x52,0x45,0x53,0x55,0x4d,0xc5,0x4c,0x45,0xd4,0x47,0x4f,0x54,0xcf,0x52,0x55,0xce,0x49,0xc6,0x52,0x45,0x53,0x54,0x4f,0x52,0xc5,0x47,0x4f,0x53,0x55,0xc2,0x52,0x45,0x54,0x55,0x52,0xce,0x52,0x45,0xcd,0x53,0x54,0x4f,0xd0,0x4f,0xce,0x50,0x4f,0x4b,0xc5,0x50,0x52,0x49,0x4e,0xd4,0x43,0x4f,0x4e,0xd4,0x4c,0x49,0x53,0xd4,0x43,0x4c,0x45,0x41,0xd2,0x47,0x45,0xd4,0x4e,0x45,0xd7,0x4d,0x45,0x4e,0xd5,0x53,0x41,0x56,0xc5,0x4c,0x4f,0x41,0xc4,0x43,0x4c,0xd3,0x54,0xcf,0x53,0x50,0x43,0xa8,0x54,0x48,0x45,0xce,0x4e,0x4f,0xd4,0x53,0x54,0x45,0xd0,0xab,0xad,0xaa,0xaf,0xde,0x41,0x4e,0xc4,0x4f,0xd2,0xbe,0xbd,0xbc,0x53,0x47,0xce,0x49,0x4e,0xd4,0x41,0x42,0xd3,0x46,0x52,0xc5,0x53,0x51,0xd2,0x52,0x4e,0xc4,0x4c,0x4f,0xc7,0x45,0x58,0xd0,0x50,0x45,0x45,0xcb,0x4c,0x45,0xce,0x53,0x54,0x52,0xa4,0x56,0x41,0xcc,0x41,0x53,0xc3,0x43,0x48,0x52,0xa4,0x4c,0x45,0x46,0x54,0xa4,0x52,0x49,0x47,0x48,0x54,0xa4,0x4d,0x49,0x44,0xa4,0x00,0x4e,0x4f,0x20,0x46,0x4f,0xd2,0x53,0x59,0x4e,0x54,0x41,0xd8,0x4e,0x4f,0x20,0x47,0x4f,0x53,0x55,0xc2,0x4f,0x55,0x54,0x20,0x4f,0x46,0x20,0x44,0x41,0x54,0xc1,0x49,0x4c,0x4c,0x45,0x47,0x20,0x51,0x54,0xd9,0x4f,0x56,0x45,0x52,0x46,0x4c,0x4f,0xd7,0x4f,0x55,0x54,0x20,0x4f,0x46,0x20,0x4d,0x45,0xcd,0x55,0x4e,0x44,0x45,0x46,0x20,0x4c,0x49,0x4e,0xc5,0x42,0x41,0x44,0x20,0x53,0x55,0x42,0x53,0x43,0xd2,0x52,0x45,0x44,0x49,0xcd,0x44,0x49,0x56,0x20,0x42,0x59,0x20,0xb0,0x4e,0x4f,0x54,0x20,0x44,0x49,0x52,0x45,0x43,0xd4,0x57,0x52,0x4f,0x4e,0x47,0x20,0x54,0x59,0xd0,0x4c,0x4f,0x4e,0x47,0x20,0x53,0x54,0xd2,0x4c,0x4f,0x4e,0x47,0x20,0x46,0x4f,0x52,0x4d,0x55,0x4c,0xc1,0x43,0x41,0x4e,0x27,0x54,0x20,0x43,0x4f,0x4e,0xd4,0x4e,0x4f,0x20,0x43,0x46,0x46,0xc1,0x20,0x45,0x52,0x52,0x00,0x20,0x49,0x4e,0x20,0x00,0x0d,0x42,0x52,0x45,0x41,0x4b,0x00,0xba,0xe8,0xe8,0xe8,0xe8,0xbd,0x01,0x01,0xc9,0x81,0xd0,0x21,0xa5,0x86,0xd0,0x0a,0xbd,0x02,0x01,0x85,0x85,0xbd,0x03,0x01,0x85,0x86,0xdd,0x03,0x01,0xd0,0x07,0xa5,0x85,0xdd,0x02,0x01,0xf0,0x07,0x8a,0x18,0x69,0x12,0xaa,0xd0,0xd8,0x60,0x20,0x91,0x62,0x85,0x6d,0x84,0x6e,0x38,0xa5,0x96,0xe5,0x9b,0x85,0x5e,0xa8,0xa5,0x97,0xe5,0x9c,0xaa,0xe8,0x98,0xf0,0x23,0xa5,0x96,0x38,0xe5,0x5e,0x85,0x96,0xb0,0x03,0xc6,0x97,0x38,0xa5,0x94,0xe5,0x5e,0x85,0x94,0xb0,0x08,0xc6,0x95,0x90,0x04,0xb1,0x96,0x91,0x94,0x88,0xd0,0xf9,0xb1,0x96,0x91,0x94,0xc6,0x97,0xc6,0x95,0xca,0xd0,0xf2,0x60,0x0a,0x69,0x36,0xb0,0x35,0x85,0x5e,0xba,0xe4,0x5e,0x90,0x2e,0x60,0xc4,0x70,0x90,0x28,0xd0,0x04,0xc5,0x6f,0x90,0x22,0x48,0xa2,0x09,0x98,0x48,0xb5,0x93,0xca,0x10,0xfa,0x20,0x4a,0x71,0xa2,0xf7,0x68,0x95,0x9d,0xe8,0x30,0xfa,0x68,0xa8,0x68,0xc4,0x70,0x90,0x06,0xd0,0x05,0xc5,0x6f,0xb0,0x01,0x60,0xa2,0x30,0x24,0xd8,0x10,0x03,0x4c,0x8d,0x7d,0x20,0x14,0x7e,0x20,0x11,0x7e,0xbd,0x6f,0x61,0x48,0x20,0x16,0x7e,0xe8,0x68,0x10,0xf5,0x20,0x0a,0x65,0xa9,0x02,0xa0,0x62,0x20,0x0e,0x69,0xa4,0x76,0xc8,0xf0,0x03,0x20,0xb9,0x79,0x20,0x14,0x7e,0xa2,0xdd,0x20,0xdc,0x63,0x86,0xb8,0x84,0xb9,0x46,0xd8,0x20,0xb1,0x00,0xaa,0xf0,0xec,0xa2,0xff,0x86,0x76,0x90,0x06,0x20,0xf1,0x63,0x4c,0x7b,0x66,0xa6,0xaf,0x86,0x69,0xa6,0xb0,0x86,0x6a,0x20,0x08,0x68,0x20,0xf1,0x63,0x84,0x0f,0x20,0xa1,0x64,0x90,0x44,0xa0,0x01,0xb1,0x9b,0x85,0x5f,0xa5,0x69,0x85,0x5e,0xa5,0x9c,0x85,0x61,0xa5,0x9b,0x88,0xf1,0x9b,0x18,0x65,0x69,0x85,0x69,0x85,0x60,0xa5,0x6a,0x69,0xff,0x85,0x6a,0xe5,0x9c,0xaa,0x38,0xa5,0x9b,0xe5,0x69,0xa8,0xb0,0x03,0xe8,0xc6,0x61,0x18,0x65,0x5e,0x90,0x03,0xc6,0x5f,0x18,0xb1,0x5e,0x91,0x60,0xc8,0xd0,0xf9,0xe6,0x5f,0xe6,0x61,0xca,0xd0,0xf2,0xad,0x00,0x02,0xf0,0x38,0xa5,0x73,0xa4,0x74,0x85,0x6f,0x84,0x70,0xa5,0x69,0x85,0x96,0x65,0x0f,0x85,0x94,0xa4,0x6a,0x84,0x97,0x90,0x01,0xc8,0x84,0x95,0x20,0x41,0x62,0xa5,0x50,0xa4,0x51,0x8d,0xfe,0x01,0x8c,0xff,0x01,0xa5,0x6d,0xa4,0x6e,0x85,0x69,0x84,0x6a,0xa4,0x0f,0xb9,0xfb,0x01,0x88,0x91,0x9b,0xd0,0xf8,0x20,0xec,0x64,0xa5,0x67,0xa4,0x68,0x85,0x5e,0x84,0x5f,0x18,0xa0,0x01,0xb1,0x5e,0xd0,0x0b,0xa5,0x69,0x85,0xaf,0xa5,0x6a,0x85,0xb0,0x4c,0xea,0x62,0xa0,0x04,0xc8,0xb1,0x5e,0xd0,0xfb,0xc8,0x98,0x65,0x5e,0xaa,0xa0,0x00,0x91,0x5e,0xa5,0x5f,0x69,0x00,0xc8,0x91,0x5e,0x86,0x5e,0x85,0x5f,0x90,0xd2,0xa2,0x80,0x86,0x33,0x20,0xf1,0x7d,0xe0,0xef,0x90,0x02,0xa2,0xef,0xa9,0x00,0x9d,0x00,0x02,0xa2,0xff,0xa0,0x01,0x60,0xa6,0xb8,0xca,0xa0,0x04,0x84,0x13,0x24,0xd6,0x10,0x08,0x68,0x68,0x20,0xec,0x64,0x4c,0x48,0x66,0xe8,0xbd,0x00,0x02,0x24,0x13,0x70,0x04,0xc9,0x20,0xf0,0xf4,0x85,0x0e,0xc9,0x22,0xf0,0x63,0x70,0x3c,0xc9,0x3f,0xd0,0x04,0xa9,0x98,0xd0,0x34,0xc9,0x30,0x90,0x04,0xc9,0x3c,0x90,0x2c,0x84,0xad,0xa9,0x8a,0x85,0x9d,0xa9,0x5f,0x85,0x9e,0xa0,0x00,0x84,0x0f,0x88,0x86,0xb8,0xca,0xc8,0xd0,0x02,0xe6,0x9e,0xe8,0xbd,0x00,0x02,0xc9,0x20,0xf0,0xf8,0x38,0xf1,0x9d,0xf0,0xee,0xc9,0x80,0xd0,0x30,0x05,0x0f,0xa4,0xad,0xe8,0xc8,0x99,0xfb,0x01,0xb9,0xfb,0x01,0xf0,0x39,0x38,0xe9,0x3a,0xf0,0x04,0xc9,0x49,0xd0,0x02,0x85,0x13,0x38,0xe9,0x5a,0xd0,0x97,0x85,0x0e,0xbd,0x00,0x02,0xf0,0xdf,0xc5,0x0e,0xf0,0xdb,0xc8,0x99,0xfb,0x01,0xe8,0xd0,0xf0,0xa6,0xb8,0xe6,0x0f,0xb1,0x9d,0xc8,0xd0,0x02,0xe6,0x9e,0x0a,0x90,0xf6,0xb1,0x9d,0xd0,0xae,0xbd,0x00,0x02,0x10,0xbb,0x99,0xfd,0x01,0xc6,0xb9,0xa9,0xff,0x85,0xb8,0x60,0xa5,0x67,0xa6,0x68,0xa0,0x01,0x85,0x9b,0x86,0x9c,0xb1,0x9b,0xf0,0x1f,0xc8,0xc8,0xa5,0x51,0xd1,0x9b,0x90,0x18,0xf0,0x03,0x88,0xd0,0x09,0xa5,0x50,0x88,0xd1,0x9b,0x90,0x0c,0xf0,0x0a,0x88,0xb1,0x9b,0xaa,0x88,0xb1,0x9b,0xb0,0xd7,0x18,0x60,0xd0,0xfd,0xa9,0x00,0x85,0xd6,0xa8,0x91,0x67,0xc8,0x91,0x67,0xa5,0x67,0x69,0x02,0x85,0x69,0x85,0xaf,0xa5,0x68,0x69,0x00,0x85,0x6a,0x85,0xb0,0x20,0x1e,0x65,0xa9,0x00,0xd0,0x2a,0xa5,0x73,0xa4,0x74,0x85,0x6f,0x84,0x70,0xa5,0x69,0xa4,0x6a,0x85,0x6b,0x84,0x6c,0x85,0x6d,0x84,0x6e,0x20,0xa7,0x66,0xa2,0x55,0x86,0x52,0x68,0xa8,0x68,0xa2,0xf8,0x9a,0x48,0x98,0x48,0xa9,0x00,0x85,0x7a,0x85,0x14,0x60,0x18,0xa5,0x67,0x69,0xff,0x85,0xb8,0xa5,0x68,0x69,0xff,0x85,0xb9,0x60,0x90,0x0a,0xf0,0x08,0xc9,0xa8,0xf0,0x04,0xc9,0x2c,0xd0,0xe5,0x20,0x08,0x68,0x20,0xa1,0x64,0x20,0xb7,0x00,0xf0,0x10,0xc9,0xa8,0xf0,0x04,0xc9,0x2c,0xd0,0x84,0x20,0xb1,0x00,0x20,0x08,0x68,0xd0,0xca,0x68,0x68,0xa5,0x50,0x05,0x51,0xd0,0x06,0xa9,0xff,0x85,0x50,0x85,0x51,0xa0,0x01,0xb1,0x9b,0xf0,0x37,0x20,0xb6,0x66,0x20,0x14,0x7e,0xc8,0xb1,0x9b,0xaa,0xc8,0xb1,0x9b,0xc5,0x51,0xd0,0x04,0xe4,0x50,0xf0,0x02,0xb0,0x20,0x84,0x85,0x20,0xc4,0x79,0xa9,0x20,0xa4,0x85,0x29,0x7f,0x20,0x16,0x7e,0xc8,0xb1,0x9b,0xd0,0x1b,0xa8,0xb1,0x9b,0xaa,0xc8,0xb1,0x9b,0x86,0x9b,0x85,0x9c,0xd0,0xc3,0x20,0x14,0x7e,0x4c,0x48,0x66,0xc8,0xd0,0x02,0xe6,0x9e,0xb1,0x9d,0x60,0x10,0xdb,0x38,0xe9,0x7f,0xaa,0x84,0x85,0xa0,0x8a,0x84,0x9d,0xa0,0x5f,0x84,0x9e,0xa0,0xff,0xca,0xf0,0x07,0x20,0xa4,0x65,0x10,0xfb,0x30,0xf6,0x20,0x0e,0x7e,0x20,0xa4,0x65,0x30,0x05,0x20,0x16,0x7e,0xd0,0xf6,0x20,0x16,0x7e,0xa9,0x20,0xd0,0xa9,0xa9,0x80,0x85,0x14,0x20,0x42,0x68,0x20,0x13,0x62,0xd0,0x05,0x8a,0x69,0x0f,0xaa,0x9a,0x68,0x68,0xa9,0x09,0x20,0x84,0x62,0x20,0x9f,0x67,0x18,0x98,0x65,0xb8,0x48,0xa5,0xb9,0x69,0x00,0x48,0xa5,0x76,0x48,0xa5,0x75,0x48,0xa9,0xa2,0x20,0x69,0x6c,0x20,0x1a,0x6b,0x20,0x17,0x6b,0xa5,0xa2,0x09,0x7f,0x25,0x9e,0x85,0x9e,0xa9,0x25,0xa0,0x66,0x85,0x5e,0x84,0x5f,0x4c,0xd0,0x6b,0xa9,0xbd,0xa0,0x75,0x20,0x9e,0x77,0x20,0xb7,0x00,0xc9,0xa6,0xd0,0x06,0x20,0xb1,0x00,0x20,0x17,0x6b,0x20,0x27,0x78,0x20,0xc5,0x6b,0xa5,0x86,0x48,0xa5,0x85,0x48,0xa9,0x81,0x48,0xba,0x86,0xf8,0x20,0xb6,0x66,0xa5,0xb8,0xa4,0xb9,0xa6,0x76,0xe8,0xf0,0x04,0x85,0x79,0x84,0x7a,0xa0,0x00,0xb1,0xb8,0xd0,0x3f,0xa0,0x02,0xb1,0xb8,0x18,0xf0,0x1c,0xc8,0xb1,0xb8,0x85,0x75,0xc8,0xb1,0xb8,0x85,0x76,0x98,0x65,0xb8,0x85,0xb8,0x90,0x02,0xe6,0xb9,0x20,0xb1,0x00,0x20,0x86,0x66,0x4c,0x48,0x66,0xf0,0x62,0xf0,0x2d,0xe9,0x80,0x90,0x11,0xc9,0x40,0xb0,0x14,0x0a,0xa8,0xb9,0x07,0x60,0x48,0xb9,0x06,0x60,0x48,0x4c,0xb1,0x00,0x4c,0x42,0x68,0xc9,0x3a,0xf0,0xd7,0x4c,0x72,0x6c,0x38,0xa5,0x67,0xe9,0x01,0xa4,0x68,0xb0,0x01,0x88,0x85,0x7d,0x84,0x7e,0x60,0xad,0x10,0xd0,0xc9,0x83,0xf0,0x01,0x60,0x20,0xd2,0x7d,0xa2,0xff,0x24,0xd8,0x10,0x03,0x4c,0x8d,0x7d,0xc9,0x03,0xb0,0x01,0x18,0xd0,0x3c,0xa5,0xb8,0xa4,0xb9,0xa6,0x76,0xe8,0xf0,0x0c,0x85,0x79,0x84,0x7a,0xa5,0x75,0xa4,0x76,0x85,0x77,0x84,0x78,0x68,0x68,0xa9,0x0c,0xa0,0x62,0x90,0x03,0x4c,0xdf,0x62,0x4c,0xea,0x62,0xd0,0x17,0xa2,0x82,0xa4,0x7a,0xd0,0x03,0x4c,0xc0,0x62,0xa5,0x79,0x85,0xb8,0x84,0xb9,0xa5,0x77,0xa4,0x78,0x85,0x75,0x84,0x76,0x60,0x08,0xc6,0x76,0x28,0xd0,0x03,0x4c,0xec,0x64,0x20,0xf3,0x64,0x4c,0x31,0x67,0xa9,0x03,0x20,0x84,0x62,0xa5,0xb9,0x48,0xa5,0xb8,0x48,0xa5,0x76,0x48,0xa5,0x75,0x48,0xa9,0x92,0x48,0x20,0xb7,0x00,0x20,0x3a,0x67,0x4c,0x48,0x66,0x20,0x08,0x68,0x20,0xa2,0x67,0xa5,0x76,0xc5,0x51,0xb0,0x0b,0x98,0x38,0x65,0xb8,0xa6,0xb9,0x90,0x07,0xe8,0xb0,0x04,0xa5,0x67,0xa6,0x68,0x20,0xa5,0x64,0x90,0x1e,0xa5,0x9b,0xe9,0x01,0x85,0xb8,0xa5,0x9c,0xe9,0x00,0x85,0xb9,0x60,0xd0,0xfd,0xa9,0xff,0x85,0x85,0x20,0x13,0x62,0x9a,0xc9,0x92,0xf0,0x0b,0xa2,0x0c,0x2c,0xa2,0x3a,0x4c,0xc0,0x62,0x4c,0x72,0x6c,0x68,0x68,0xc0,0x10,0xf0,0x3b,0x85,0x75,0x68,0x85,0x76,0x68,0x85,0xb8,0x68,0x85,0xb9,0x20,0x9f,0x67,0x98,0x18,0x65,0xb8,0x85,0xb8,0x90,0x02,0xe6,0xb9,0x60,0xa2,0x3a,0x2c,0xa2,0x00,0x86,0x0d,0xa0,0x00,0x84,0x0e,0xa5,0x0e,0xa6,0x0d,0x85,0x0d,0x86,0x0e,0xb1,0xb8,0xf0,0xe8,0xc5,0x0e,0xf0,0xe4,0xc8,0xc9,0x22,0xd0,0xf3,0xf0,0xe9,0x68,0x68,0x68,0x60,0x20,0x2b,0x6b,0x20,0xb7,0x00,0xc9,0x8e,0xf0,0x05,0xa9,0xa4,0x20,0x69,0x6c,0xa5,0x9d,0xd0,0x05,0x20,0xa2,0x67,0xf0,0xb7,0x20,0xb7,0x00,0xb0,0x03,0x4c,0x3a,0x67,0x4c,0x86,0x66,0x20,0xbe,0x73,0x48,0xc9,0x92,0xf0,0x04,0xc9,0x8e,0xd0,0x89,0xc6,0xa1,0xd0,0x04,0x68,0x4c,0x88,0x66,0x20,0xb1,0x00,0x20,0x08,0x68,0xc9,0x2c,0xf0,0xee,0x68,0x60,0xa2,0x00,0x86,0x50,0x86,0x51,0xb0,0xf7,0xe9,0x2f,0x85,0x0d,0xa5,0x51,0x85,0x5e,0xc9,0x19,0xb0,0xd4,0xa5,0x50,0x0a,0x26,0x5e,0x0a,0x26,0x5e,0x65,0x50,0x85,0x50,0xa5,0x5e,0x65,0x51,0x85,0x51,0x06,0x50,0x26,0x51,0xa5,0x50,0x65,0x0d,0x85,0x50,0x90,0x02,0xe6,0x51,0x20,0xb1,0x00,0x4c,0x0e,0x68,0x20,0x6c,0x6d,0x85,0x85,0x84,0x86,0xa9,0xaf,0x20,0x69,0x6c,0xa5,0x12,0x48,0xa5,0x11,0x48,0x20,0x2b,0x6b,0x68,0x2a,0x20,0x1d,0x6b,0xd0,0x18,0x68,0x10,0x12,0x20,0x17,0x78,0x20,0x8b,0x6e,0xa0,0x00,0xa5,0xa0,0x91,0x85,0xc8,0xa5,0xa1,0x91,0x85,0x60,0x4c,0xcc,0x77,0x68,0xa0,0x02,0xb1,0xa0,0xc5,0x70,0x90,0x17,0xd0,0x07,0x88,0xb1,0xa0,0xc5,0x6f,0x90,0x0e,0xa4,0xa1,0xc4,0x6a,0x90,0x08,0xd0,0x0d,0xa5,0xa0,0xc5,0x69,0xb0,0x07,0xa5,0xa0,0xa4,0xa1,0x4c,0xb3,0x68,0xa0,0x00,0xb1,0xa0,0x20,0x9b,0x70,0xa5,0x8c,0xa4,0x8d,0x85,0xab,0x84,0xac,0x20,0x9a,0x72,0xa9,0x9d,0xa0,0x00,0x85,0x8c,0x84,0x8d,0x20,0xfb,0x72,0xa0,0x00,0xb1,0x8c,0x91,0x85,0xc8,0xb1,0x8c,0x91,0x85,0xc8,0xb1,0x8c,0x91,0x85,0x60,0x20,0x11,0x69,0x20,0xb7,0x00,0xf0,0x1f,0xf0,0xf5,0xc9,0xa3,0x18,0xf0,0x1b,0xc9,0x2c,0xf0,0x25,0xc9,0x3b,0xf0,0x21,0x20,0x2b,0x6b,0x24,0x11,0x30,0xe2,0x20,0xd4,0x79,0x20,0xad,0x70,0x4c,0xcb,0x68,0x4c,0x14,0x7e,0x20,0xbb,0x73,0xc9,0x29,0xf0,0x03,0x4c,0x72,0x6c,0xe8,0xca,0xd0,0x06,0x20,0xb1,0x00,0x4c,0xd3,0x68,0x20,0x0e,0x7e,0xd0,0xf2,0x20,0xad,0x70,0x20,0xc6,0x72,0xaa,0xa0,0x00,0xe8,0xca,0xf0,0xaf,0xb1,0x5e,0x20,0x16,0x7e,0xc8,0x4c,0x18,0x69,0xa5,0x15,0xf0,0x12,0x30,0x04,0xa0,0xff,0xd0,0x04,0xa5,0x7b,0xa4,0x7c,0x85,0x75,0x84,0x76,0x4c,0x72,0x6c,0x68,0x24,0xd8,0x10,0x05,0xa2,0xfe,0x4c,0x8d,0x7d,0xa9,0x9f,0xa0,0x6a,0x20,0x0e,0x69,0xa5,0x79,0xa4,0x7a,0x85,0xb8,0x84,0xb9,0x60,0x20,0x81,0x70,0xa2,0x01,0xa0,0x02,0xa9,0x00,0x8d,0x01,0x02,0xa9,0x40,0x4c,0x9d,0x69,0xc9,0x22,0xd0,0x0e,0x20,0x31,0x6c,0xa9,0x3b,0x20,0x69,0x6c,0x20,0x11,0x69,0x4c,0x79,0x69,0x20,0x11,0x7e,0x20,0x81,0x70,0xa9,0x2c,0x8d,0xff,0x01,0x20,0xda,0x63,0xad,0x00,0x02,0xc9,0x03,0xd0,0x10,0x4c,0xc1,0x66,0x20,0x11,0x7e,0x4c,0xda,0x63,0xa6,0x7d,0xa4,0x7e,0xa9,0x98,0x2c,0xa9,0x00,0x85,0x15,0x86,0x7f,0x84,0x80,0x20,0x6c,0x6d,0x85,0x85,0x84,0x86,0xa5,0xb8,0xa4,0xb9,0x85,0x87,0x84,0x88,0xa6,0x7f,0xa4,0x80,0x86,0xb8,0x84,0xb9,0x20,0xb7,0x00,0xd0,0x1c,0x24,0x15,0x50,0x0c,0x20,0xd2,0x7d,0x8d,0x00,0x02,0xa2,0xff,0xa0,0x01,0xd0,0x08,0x30,0x7f,0x20,0x11,0x7e,0x20,0x8e,0x69,0x86,0xb8,0x84,0xb9,0x20,0xb1,0x00,0x24,0x11,0x10,0x31,0x24,0x15,0x50,0x09,0xe8,0x86,0xb8,0xa9,0x00,0x85,0x0d,0xf0,0x0c,0x85,0x0d,0xc9,0x22,0xf0,0x07,0xa9,0x3a,0x85,0x0d,0xa9,0x2c,0x18,0x85,0x0e,0xa5,0xb8,0xa4,0xb9,0x69,0x00,0x90,0x01,0xc8,0x20,0xb3,0x70,0x20,0x03,0x74,0x20,0x77,0x68,0x4c,0x22,0x6a,0x48,0xad,0x00,0x02,0xf0,0x30,0x68,0x20,0xec,0x78,0xa5,0x12,0x20,0x5f,0x68,0x20,0xb7,0x00,0xf0,0x07,0xc9,0x2c,0xf0,0x03,0x4c,0x24,0x69,0xa5,0xb8,0xa4,0xb9,0x85,0x7f,0x84,0x80,0xa5,0x87,0xa4,0x88,0x85,0xb8,0x84,0xb9,0x20,0xb7,0x00,0xf0,0x33,0x20,0x67,0x6c,0x4c,0xa3,0x69,0xa5,0x15,0xd0,0xcc,0x4c,0x39,0x69,0x20,0x9f,0x67,0xc8,0xaa,0xd0,0x12,0xa2,0x14,0xc8,0xb1,0xb8,0xf0,0x5f,0xc8,0xb1,0xb8,0x85,0x7b,0xc8,0xb1,0xb8,0xc8,0x85,0x7c,0xb1,0xb8,0xaa,0x20,0x94,0x67,0xe0,0x83,0xd0,0xdd,0x4c,0xdb,0x69,0xa5,0x7f,0xa4,0x80,0xa6,0x15,0x10,0x03,0x4c,0xb1,0x66,0xa0,0x00,0xb1,0x7f,0xf0,0x07,0xa9,0x8f,0xa0,0x6a,0x4c,0x0e,0x69,0x60,0x3f,0x45,0x58,0x54,0x52,0x41,0x20,0x49,0x47,0x4e,0x4f,0x52,0x45,0x44,0x0d,0x00,0x3f,0x52,0x45,0x45,0x4e,0x54,0x45,0x52,0x0d,0x00,0xd0,0x04,0xa0,0x00,0xf0,0x03,0x20,0x6c,0x6d,0x85,0x85,0x84,0x86,0x20,0x13,0x62,0xf0,0x04,0xa2,0x00,0xf0,0x69,0x9a,0xe8,0xe8,0xe8,0xe8,0x8a,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0x86,0x60,0xa0,0x01,0x20,0x9e,0x77,0xba,0xbd,0x09,0x01,0x85,0xa2,0xa5,0x85,0xa4,0x86,0x20,0x68,0x74,0x20,0xcc,0x77,0xa0,0x01,0x20,0x59,0x78,0xba,0x38,0xfd,0x09,0x01,0xf0,0x17,0xbd,0x0f,0x01,0x85,0x75,0xbd,0x10,0x01,0x85,0x76,0xbd,0x12,0x01,0x85,0xb8,0xbd,0x11,0x01,0x85,0xb9,0x4c,0x48,0x66,0x8a,0x69,0x11,0xaa,0x9a,0x20,0xb7,0x00,0xc9,0x2c,0xd0,0xf1,0x20,0xb1,0x00,0x20,0xaf,0x6a,0x20,0x2b,0x6b,0x18,0x24,0x38,0x24,0x11,0x30,0x03,0xb0,0x03,0x60,0xb0,0xfd,0xa2,0x65,0x4c,0xc0,0x62,0xa6,0xb8,0xd0,0x02,0xc6,0xb9,0xc6,0xb8,0xa2,0x00,0x24,0x48,0x8a,0x48,0xa9,0x01,0x20,0x84,0x62,0x20,0x10,0x6c,0xa9,0x00,0x85,0x89,0x20,0xb7,0x00,0x38,0xe9,0xae,0x90,0x17,0xc9,0x03,0xb0,0x13,0xc9,0x01,0x2a,0x49,0x01,0x45,0x89,0xc5,0x89,0x90,0x61,0x85,0x89,0x20,0xb1,0x00,0x4c,0x48,0x6b,0xa6,0x89,0xd0,0x2c,0xb0,0x7b,0x69,0x07,0x90,0x77,0x65,0x11,0xd0,0x03,0x4c,0x5d,0x72,0x69,0xff,0x85,0x5e,0x0a,0x65,0x5e,0xa8,0x68,0xd9,0x6c,0x60,0xb0,0x67,0x20,0x1a,0x6b,0x48,0x20,0xad,0x6b,0x68,0xa4,0x87,0x10,0x17,0xaa,0xf0,0x56,0xd0,0x5f,0x46,0x11,0x8a,0x2a,0xa6,0xb8,0xd0,0x02,0xc6,0xb9,0xc6,0xb8,0xa0,0x1b,0x85,0x89,0xd0,0xd7,0xd9,0x6c,0x60,0xb0,0x48,0x90,0xd9,0xb9,0x6e,0x60,0x48,0xb9,0x6d,0x60,0x48,0x20,0xc0,0x6b,0xa5,0x89,0x4c,0x36,0x6b,0x4c,0x72,0x6c,0xa5,0xa2,0xbe,0x6c,0x60,0xa8,0x68,0x85,0x5e,0xe6,0x5e,0x68,0x85,0x5f,0x98,0x48,0x20,0x17,0x78,0xa5,0xa1,0x48,0xa5,0xa0,0x48,0xa5,0x9f,0x48,0xa5,0x9e,0x48,0xa5,0x9d,0x48,0x6c,0x5e,0x00,0xa0,0xff,0x68,0xf0,0x23,0xc9,0x64,0xf0,0x03,0x20,0x1a,0x6b,0x84,0x87,0x68,0x4a,0x85,0x16,0x68,0x85,0xa5,0x68,0x85,0xa6,0x68,0x85,0xa7,0x68,0x85,0xa8,0x68,0x85,0xa9,0x68,0x85,0xaa,0x45,0xa2,0x85,0xab,0xa5,0x9d,0x60,0xa9,0x00,0x85,0x11,0x20,0xb1,0x00,0xb0,0x03,0x4c,0xec,0x78,0x20,0xfc,0x6d,0xb0,0x5d,0xc9,0x2e,0xf0,0xf4,0xc9,0xa8,0xf0,0x4e,0xc9,0xa7,0xf0,0xe7,0xc9,0x22,0xd0,0x0f,0xa5,0xb8,0xa4,0xb9,0x69,0x00,0x90,0x01,0xc8,0x20,0xad,0x70,0x4c,0x03,0x74,0xc9,0xa5,0xd0,0x10,0xa0,0x18,0xd0,0x31,0xa5,0x9d,0xd0,0x03,0xa0,0x01,0x2c,0xa0,0x00,0x4c,0x7d,0x70,0xc9,0xb1,0x90,0x03,0x4c,0xa2,0x6c,0x20,0x64,0x6c,0x20,0x2b,0x6b,0xa9,0x29,0x2c,0xa9,0x28,0x2c,0xa9,0x2c,0xa0,0x00,0xd1,0xb8,0xd0,0x03,0x4c,0xb1,0x00,0xa2,0x06,0x4c,0xc0,0x62,0xa0,0x15,0x68,0x68,0x4c,0x87,0x6b,0x20,0x6c,0x6d,0x85,0xa0,0x84,0xa1,0xa6,0x11,0xf0,0x05,0xa2,0x00,0x86,0xac,0x60,0xa6,0x12,0x10,0x0d,0xa0,0x00,0xb1,0xa0,0xaa,0xc8,0xb1,0xa0,0xa8,0x8a,0x4c,0x70,0x70,0x4c,0x9e,0x77,0x0a,0x48,0xaa,0x20,0xb1,0x00,0xe0,0x7d,0x90,0x20,0x20,0x64,0x6c,0x20,0x2b,0x6b,0x20,0x67,0x6c,0x20,0x1c,0x6b,0x68,0xaa,0xa5,0xa1,0x48,0xa5,0xa0,0x48,0x8a,0x48,0x20,0xbe,0x73,0x68,0xa8,0x8a,0x48,0x4c,0xd1,0x6c,0x20,0x5b,0x6c,0x68,0xa8,0xb9,0xe8,0x5f,0x85,0x91,0xb9,0xe9,0x5f,0x85,0x92,0x20,0x90,0x00,0x4c,0x1a,0x6b,0xa5,0xa5,0x05,0x9d,0xd0,0x0b,0xa5,0xa5,0xf0,0x04,0xa5,0x9d,0xd0,0x03,0xa0,0x00,0x2c,0xa0,0x01,0x4c,0x7d,0x70,0x20,0x1d,0x6b,0xb0,0x13,0xa5,0xaa,0x09,0x7f,0x25,0xa6,0x85,0xa6,0xa9,0xa5,0xa0,0x00,0x20,0x57,0x78,0xaa,0x4c,0x42,0x6d,0xa9,0x00,0x85,0x11,0xc6,0x89,0x20,0xc6,0x72,0x85,0x9d,0x86,0x9e,0x84,0x9f,0xa5,0xa8,0xa4,0xa9,0x20,0xca,0x72,0x86,0xa8,0x84,0xa9,0xaa,0x38,0xe5,0x9d,0xf0,0x08,0xa9,0x01,0x90,0x04,0xa6,0x9d,0xa9,0xff,0x85,0xa2,0xa0,0xff,0xe8,0xc8,0xca,0xd0,0x07,0xa6,0xa2,0x30,0x0f,0x18,0x90,0x0c,0xb1,0xa8,0xd1,0x9e,0xf0,0xef,0xa2,0xff,0xb0,0x02,0xa2,0x01,0xe8,0x8a,0x2a,0x25,0x16,0xf0,0x02,0xa9,0x01,0x4c,0x38,0x78,0x20,0x67,0x6c,0xaa,0x20,0x71,0x6d,0x20,0xb7,0x00,0xd0,0xf4,0x60,0xa2,0x00,0x20,0xb7,0x00,0x86,0x10,0x85,0x81,0x20,0xb7,0x00,0x20,0xfc,0x6d,0xb0,0x03,0x4c,0x72,0x6c,0xa2,0x00,0x86,0x11,0x86,0x12,0x20,0xb1,0x00,0x90,0x05,0x20,0xfc,0x6d,0x90,0x0b,0xaa,0x20,0xb1,0x00,0x90,0xfb,0x20,0xfc,0x6d,0xb0,0xf6,0xc9,0x24,0xd0,0x06,0xa9,0xff,0x85,0x11,0xd0,0x10,0xc9,0x25,0xd0,0x13,0xa5,0x14,0x30,0xd0,0xa9,0x80,0x85,0x12,0x05,0x81,0x85,0x81,0x8a,0x09,0x80,0xaa,0x20,0xb1,0x00,0x86,0x82,0x38,0x05,0x14,0xe9,0x28,0xd0,0x03,0x4c,0x9d,0x6e,0x24,0x14,0x30,0x02,0x70,0xf7,0xa9,0x00,0x85,0x14,0xa5,0x69,0xa6,0x6a,0xa0,0x00,0x86,0x9c,0x85,0x9b,0xe4,0x6c,0xd0,0x04,0xc5,0x6b,0xf0,0x21,0xa5,0x81,0xd1,0x9b,0xd0,0x08,0xa5,0x82,0xc8,0xd1,0x9b,0xf0,0x6b,0x88,0x18,0xa5,0x9b,0x69,0x07,0x90,0xe1,0xe8,0xd0,0xdc,0xc9,0x5b,0xb0,0x03,0xc9,0x41,0x60,0x18,0x60,0x68,0x48,0xc9,0x80,0xd0,0x0f,0xba,0xbd,0x02,0x01,0xc9,0x6c,0xd0,0x07,0xa9,0x18,0xa0,0x6e,0x60,0x00,0x00,0xa5,0x6b,0xa4,0x6c,0x85,0x9b,0x84,0x9c,0xa5,0x6d,0xa4,0x6e,0x85,0x96,0x84,0x97,0x18,0x69,0x07,0x90,0x01,0xc8,0x85,0x94,0x84,0x95,0x20,0x41,0x62,0xa5,0x94,0xa4,0x95,0xc8,0x85,0x6b,0x84,0x6c,0xa0,0x00,0xa5,0x81,0x91,0x9b,0xc8,0xa5,0x82,0x91,0x9b,0xa9,0x00,0xc8,0x91,0x9b,0xc8,0x91,0x9b,0xc8,0x91,0x9b,0xc8,0x91,0x9b,0xc8,0x91,0x9b,0xa5,0x9b,0x18,0x69,0x02,0xa4,0x9c,0x90,0x01,0xc8,0x85,0x83,0x84,0x84,0x60,0xa5,0x0f,0x0a,0x69,0x05,0x65,0x9b,0xa4,0x9c,0x90,0x01,0xc8,0x85,0x94,0x84,0x95,0x60,0x90,0x80,0x00,0x00,0x00,0x20,0xb1,0x00,0x20,0x17,0x6b,0xa5,0xa2,0x30,0x0d,0xa5,0x9d,0xc9,0x90,0x90,0x09,0xa9,0x7c,0xa0,0x6e,0x20,0x57,0x78,0xd0,0x7e,0x4c,0x94,0x78,0xa5,0x14,0xd0,0x47,0xa5,0x10,0x05,0x12,0x48,0xa5,0x11,0x48,0xa0,0x00,0x98,0x48,0xa5,0x82,0x48,0xa5,0x81,0x48,0x20,0x81,0x6e,0x68,0x85,0x81,0x68,0x85,0x82,0x68,0xa8,0xba,0xbd,0x02,0x01,0x48,0xbd,0x01,0x01,0x48,0xa5,0xa0,0x9d,0x02,0x01,0xa5,0xa1,0x9d,0x01,0x01,0xc8,0x20,0xb7,0x00,0xc9,0x2c,0xf0,0xd2,0x84,0x0f,0x20,0x61,0x6c,0x68,0x85,0x11,0x68,0x85,0x12,0x29,0x7f,0x85,0x10,0xa6,0x6b,0xa5,0x6c,0x86,0x9b,0x85,0x9c,0xc5,0x6e,0xd0,0x04,0xe4,0x6d,0xf0,0x3f,0xa0,0x00,0xb1,0x9b,0xc8,0xc5,0x81,0xd0,0x06,0xa5,0x82,0xd1,0x9b,0xf0,0x16,0xc8,0xb1,0x9b,0x18,0x65,0x9b,0xaa,0xc8,0xb1,0x9b,0x65,0x9c,0x90,0xd7,0xa2,0x44,0x2c,0xa2,0x1f,0x4c,0xc0,0x62,0xa2,0x4e,0xa5,0x10,0xd0,0xf7,0xa5,0x14,0xf0,0x02,0x38,0x60,0x20,0x6b,0x6e,0xa5,0x0f,0xa0,0x04,0xd1,0x9b,0xd0,0xe1,0x4c,0xc9,0x6f,0xa5,0x14,0xf0,0x05,0xa2,0x14,0x4c,0xc0,0x62,0x20,0x6b,0x6e,0x20,0x91,0x62,0xa0,0x00,0x84,0xae,0xa2,0x05,0xa5,0x81,0x91,0x9b,0x10,0x01,0xca,0xc8,0xa5,0x82,0x91,0x9b,0x10,0x02,0xca,0xca,0x86,0xad,0xa5,0x0f,0xc8,0xc8,0xc8,0x91,0x9b,0xa2,0x0b,0xa9,0x00,0x24,0x10,0x50,0x08,0x68,0x18,0x69,0x01,0xaa,0x68,0x69,0x00,0xc8,0x91,0x9b,0xc8,0x8a,0x91,0x9b,0x20,0x2b,0x70,0x86,0xad,0x85,0xae,0xa4,0x5e,0xc6,0x0f,0xd0,0xdc,0x65,0x95,0xb0,0x5d,0x85,0x95,0xa8,0x8a,0x65,0x94,0x90,0x03,0xc8,0xf0,0x52,0x20,0x91,0x62,0x85,0x6d,0x84,0x6e,0xa9,0x00,0xe6,0xae,0xa4,0xad,0xf0,0x05,0x88,0x91,0x94,0xd0,0xfb,0xc6,0x95,0xc6,0xae,0xd0,0xf5,0xe6,0x95,0x38,0xa5,0x6d,0xe5,0x9b,0xa0,0x02,0x91,0x9b,0xa5,0x6e,0xc8,0xe5,0x9c,0x91,0x9b,0xa5,0x10,0xd0,0x62,0xc8,0xb1,0x9b,0x85,0x0f,0xa9,0x00,0x85,0xad,0x85,0xae,0xc8,0x68,0xaa,0x85,0xa0,0x68,0x85,0xa1,0xd1,0x9b,0x90,0x0e,0xd0,0x06,0xc8,0x8a,0xd1,0x9b,0x90,0x07,0x4c,0x15,0x6f,0x4c,0xbe,0x62,0xc8,0xa5,0xae,0x05,0xad,0x18,0xf0,0x0a,0x20,0x2b,0x70,0x8a,0x65,0xa0,0xaa,0x98,0xa4,0x5e,0x65,0xa1,0x86,0xad,0xc6,0x0f,0xd0,0xca,0x85,0xae,0xa2,0x05,0xa5,0x81,0x10,0x01,0xca,0xa5,0x82,0x10,0x02,0xca,0xca,0x86,0x64,0xa9,0x00,0x20,0x34,0x70,0x8a,0x65,0x94,0x85,0x83,0x98,0x65,0x95,0x85,0x84,0xa8,0xa5,0x83,0x60,0x84,0x5e,0xb1,0x9b,0x85,0x64,0x88,0xb1,0x9b,0x85,0x65,0xa9,0x10,0x85,0x99,0xa2,0x00,0xa0,0x00,0x8a,0x0a,0xaa,0x98,0x2a,0xa8,0xb0,0xa4,0x06,0xad,0x26,0xae,0x90,0x0b,0x18,0x8a,0x65,0x64,0xaa,0x98,0x65,0x65,0xa8,0xb0,0x93,0xc6,0x99,0xd0,0xe3,0x60,0xa5,0x11,0xf0,0x03,0x20,0xc6,0x72,0x20,0x4a,0x71,0x38,0xa5,0x6f,0xe5,0x6d,0xa8,0xa5,0x70,0xe5,0x6e,0xa2,0x00,0x86,0x11,0x85,0x9e,0x84,0x9f,0xa2,0x90,0x4c,0x40,0x78,0xa9,0x00,0xf0,0xef,0xa6,0x76,0xe8,0xd0,0xa4,0xa2,0x5b,0x4c,0xc0,0x62,0x20,0x1a,0x6b,0xa0,0x00,0x20,0xd6,0x79,0x68,0x68,0xa9,0xff,0xa0,0x00,0xf0,0x12,0xa6,0xa0,0xa4,0xa1,0x86,0x8c,0x84,0x8d,0x20,0x18,0x71,0x86,0x9e,0x84,0x9f,0x85,0x9d,0x60,0xa2,0x22,0x86,0x0d,0x86,0x0e,0x85,0xab,0x84,0xac,0x85,0x9e,0x84,0x9f,0xa0,0xff,0xc8,0xb1,0xab,0xf0,0x0c,0xc5,0x0d,0xf0,0x04,0xc5,0x0e,0xd0,0xf3,0xc9,0x22,0xf0,0x01,0x18,0x84,0x9d,0x98,0x65,0xab,0x85,0xad,0xa6,0xac,0x90,0x01,0xe8,0x86,0xae,0xa5,0xac,0xf0,0x04,0xc9,0x02,0xd0,0x0b,0x98,0x20,0x9b,0x70,0xa6,0xab,0xa4,0xac,0x20,0xa8,0x72,0xa6,0x52,0xe0,0x5e,0xd0,0x05,0xa2,0x76,0x4c,0xc0,0x62,0xa5,0x9d,0x95,0x00,0xa5,0x9e,0x95,0x01,0xa5,0x9f,0x95,0x02,0xa0,0x00,0x86,0xa0,0x84,0xa1,0x88,0x84,0x11,0x86,0x53,0xe8,0xe8,0xe8,0x86,0x52,0x60,0x46,0x13,0x48,0x49,0xff,0x38,0x65,0x6f,0xa4,0x70,0xb0,0x01,0x88,0xc4,0x6e,0x90,0x11,0xd0,0x04,0xc5,0x6d,0x90,0x0b,0x85,0x6f,0x84,0x70,0x85,0x71,0x84,0x72,0xaa,0x68,0x60,0xa2,0x30,0xa5,0x13,0x30,0xb8,0x20,0x4a,0x71,0xa9,0x80,0x85,0x13,0x68,0xd0,0xd0,0xa6,0x73,0xa5,0x74,0x86,0x6f,0x85,0x70,0xa0,0x00,0x84,0x8b,0xa5,0x6d,0xa6,0x6e,0x85,0x9b,0x86,0x9c,0xa9,0x55,0xa2,0x00,0x85,0x5e,0x86,0x5f,0xc5,0x52,0xf0,0x05,0x20,0xe9,0x71,0xf0,0xf7,0xa9,0x07,0x85,0x8f,0xa5,0x69,0xa6,0x6a,0x85,0x5e,0x86,0x5f,0xe4,0x6c,0xd0,0x04,0xc5,0x6b,0xf0,0x05,0x20,0xdf,0x71,0xf0,0xf3,0x85,0x94,0x86,0x95,0xa9,0x03,0x85,0x8f,0xa5,0x94,0xa6,0x95,0xe4,0x6e,0xd0,0x07,0xc5,0x6d,0xd0,0x03,0x4c,0x28,0x72,0x85,0x5e,0x86,0x5f,0xa0,0x00,0xb1,0x5e,0xaa,0xc8,0xb1,0x5e,0x08,0xc8,0xb1,0x5e,0x65,0x94,0x85,0x94,0xc8,0xb1,0x5e,0x65,0x95,0x85,0x95,0x28,0x10,0xd3,0x8a,0x30,0xd0,0xc8,0xb1,0x5e,0xa0,0x00,0x0a,0x69,0x05,0x65,0x5e,0x85,0x5e,0x90,0x02,0xe6,0x5f,0xa6,0x5f,0xe4,0x95,0xd0,0x04,0xc5,0x94,0xf0,0xba,0x20,0xe9,0x71,0xf0,0xf3,0xb1,0x5e,0x30,0x35,0xc8,0xb1,0x5e,0x10,0x30,0xc8,0xb1,0x5e,0xf0,0x2b,0xc8,0xb1,0x5e,0xaa,0xc8,0xb1,0x5e,0xc5,0x70,0x90,0x06,0xd0,0x1e,0xe4,0x6f,0xb0,0x1a,0xc5,0x9c,0x90,0x16,0xd0,0x04,0xe4,0x9b,0x90,0x10,0x86,0x9b,0x85,0x9c,0xa5,0x5e,0xa6,0x5f,0x85,0x8a,0x86,0x8b,0xa5,0x8f,0x85,0x91,0xa5,0x8f,0x18,0x65,0x5e,0x85,0x5e,0x90,0x02,0xe6,0x5f,0xa6,0x5f,0xa0,0x00,0x60,0xa6,0x8b,0xf0,0xf7,0xa5,0x91,0x29,0x04,0x4a,0xa8,0x85,0x91,0xb1,0x8a,0x65,0x9b,0x85,0x96,0xa5,0x9c,0x69,0x00,0x85,0x97,0xa5,0x6f,0xa6,0x70,0x85,0x94,0x86,0x95,0x20,0x48,0x62,0xa4,0x91,0xc8,0xa5,0x94,0x91,0x8a,0xaa,0xe6,0x95,0xa5,0x95,0xc8,0x91,0x8a,0x4c,0x4e,0x71,0xa5,0xa1,0x48,0xa5,0xa0,0x48,0x20,0x10,0x6c,0x20,0x1c,0x6b,0x68,0x85,0xab,0x68,0x85,0xac,0xa0,0x00,0xb1,0xab,0x18,0x71,0xa0,0x90,0x05,0xa2,0x6e,0x4c,0xc0,0x62,0x20,0x9b,0x70,0x20,0x9a,0x72,0xa5,0x8c,0xa4,0x8d,0x20,0xca,0x72,0x20,0xac,0x72,0xa5,0xab,0xa4,0xac,0x20,0xca,0x72,0x20,0xf0,0x70,0x4c,0x45,0x6b,0xa0,0x00,0xb1,0xab,0x48,0xc8,0xb1,0xab,0xaa,0xc8,0xb1,0xab,0xa8,0x68,0x86,0x5e,0x84,0x5f,0xa8,0xf0,0x0a,0x48,0x88,0xb1,0x5e,0x91,0x71,0x98,0xd0,0xf8,0x68,0x18,0x65,0x71,0x85,0x71,0x90,0x02,0xe6,0x72,0x60,0x20,0x1c,0x6b,0xa5,0xa0,0xa4,0xa1,0x85,0x5e,0x84,0x5f,0x20,0xfb,0x72,0x08,0xa0,0x00,0xb1,0x5e,0x48,0xc8,0xb1,0x5e,0xaa,0xc8,0xb1,0x5e,0xa8,0x68,0x28,0xd0,0x13,0xc4,0x70,0xd0,0x0f,0xe4,0x6f,0xd0,0x0b,0x48,0x18,0x65,0x6f,0x85,0x6f,0x90,0x02,0xe6,0x70,0x68,0x86,0x5e,0x84,0x5f,0x60,0xc4,0x54,0xd0,0x0c,0xc5,0x53,0xd0,0x08,0x85,0x52,0xe9,0x03,0x85,0x53,0xa0,0x00,0x60,0x20,0xc1,0x73,0x8a,0x48,0xa9,0x01,0x20,0xa3,0x70,0x68,0xa0,0x00,0x91,0x9e,0x68,0x68,0x4c,0xf0,0x70,0x20,0x7f,0x73,0xd1,0x8c,0x98,0x90,0x04,0xb1,0x8c,0xaa,0x98,0x48,0x8a,0x48,0x20,0xa3,0x70,0xa5,0x8c,0xa4,0x8d,0x20,0xca,0x72,0x68,0xa8,0x68,0x18,0x65,0x5e,0x85,0x5e,0x90,0x02,0xe6,0x5f,0x98,0x20,0xac,0x72,0x4c,0xf0,0x70,0x20,0x7f,0x73,0x18,0xf1,0x8c,0x49,0xff,0x4c,0x26,0x73,0xa9,0xff,0x85,0xa1,0x20,0xb7,0x00,0xc9,0x29,0xf0,0x06,0x20,0x67,0x6c,0x20,0xbe,0x73,0x20,0x7f,0x73,0xca,0x8a,0x48,0x18,0xa2,0x00,0xf1,0x8c,0xb0,0xb8,0x49,0xff,0xc5,0xa1,0x90,0xb3,0xa5,0xa1,0xb0,0xaf,0x20,0x61,0x6c,0x68,0xa8,0x68,0x85,0x91,0x68,0x68,0x68,0xaa,0x68,0x85,0x8c,0x68,0x85,0x8d,0xa5,0x91,0x48,0x98,0x48,0xa0,0x00,0x8a,0xf0,0x1d,0x60,0x20,0xa2,0x73,0x4c,0x7d,0x70,0x20,0xc3,0x72,0xa2,0x00,0x86,0x11,0xa8,0x60,0x20,0xa2,0x73,0xf0,0x08,0xa0,0x00,0xb1,0x5e,0xa8,0x4c,0x7d,0x70,0x4c,0x18,0x6f,0x20,0xb1,0x00,0x20,0x17,0x6b,0x20,0x87,0x6e,0xa6,0xa0,0xd0,0xf0,0xa6,0xa1,0x4c,0xb7,0x00,0x20,0xa2,0x73,0xd0,0x03,0x4c,0xf8,0x74,0xa6,0xb8,0xa4,0xb9,0x86,0xad,0x84,0xae,0xa6,0x5e,0x86,0xb8,0x18,0x65,0x5e,0x85,0x60,0xa6,0x5f,0x86,0xb9,0x90,0x01,0xe8,0x86,0x61,0xa0,0x00,0xb1,0x60,0x48,0xa9,0x00,0x91,0x60,0x20,0xb7,0x00,0x20,0xec,0x78,0x68,0xa0,0x00,0x91,0x60,0xa6,0xad,0xa4,0xae,0x86,0xb8,0x84,0xb9,0x60,0x20,0x17,0x6b,0x20,0x18,0x74,0x20,0x67,0x6c,0x4c,0xbe,0x73,0xa5,0x9d,0xc9,0x91,0xb0,0x9a,0x20,0x94,0x78,0xa5,0xa0,0xa4,0xa1,0x84,0x50,0x85,0x51,0x60,0xa5,0x50,0x48,0xa5,0x51,0x48,0x20,0x18,0x74,0xa0,0x00,0xb1,0x50,0xa8,0x68,0x85,0x51,0x68,0x85,0x50,0x4c,0x7d,0x70,0x20,0x0c,0x74,0x8a,0xa0,0x00,0x91,0x50,0x60,0xa9,0x04,0xa0,0x7b,0x4c,0x68,0x74,0x20,0x8b,0x76,0xa5,0xa2,0x49,0xff,0x85,0xa2,0x45,0xaa,0x85,0xab,0xa5,0x9d,0x4c,0x6b,0x74,0x20,0x9a,0x75,0x90,0x3c,0x20,0x8b,0x76,0xd0,0x03,0x4c,0xf8,0x77,0xa6,0xac,0x86,0x92,0xa2,0xa5,0xa5,0xa5,0xa8,0xf0,0xce,0x38,0xe5,0x9d,0xf0,0x24,0x90,0x12,0x84,0x9d,0xa4,0xaa,0x84,0xa2,0x49,0xff,0x69,0x00,0xa0,0x00,0x84,0x92,0xa2,0x9d,0xd0,0x04,0xa0,0x00,0x84,0xac,0xc9,0xf9,0x30,0xc7,0xa8,0xa5,0xac,0x56,0x01,0x20,0xb1,0x75,0x24,0xab,0x10,0x57,0xa0,0x9d,0xe0,0xa5,0xf0,0x02,0xa0,0xa5,0x38,0x49,0xff,0x65,0x92,0x85,0xac,0xb9,0x04,0x00,0xf5,0x04,0x85,0xa1,0xb9,0x03,0x00,0xf5,0x03,0x85,0xa0,0xb9,0x02,0x00,0xf5,0x02,0x85,0x9f,0xb9,0x01,0x00,0xf5,0x01,0x85,0x9e,0xb0,0x03,0x20,0x48,0x75,0xa0,0x00,0x98,0x18,0xa6,0x9e,0xd0,0x4a,0xa6,0x9f,0x86,0x9e,0xa6,0xa0,0x86,0x9f,0xa6,0xa1,0x86,0xa0,0xa6,0xac,0x86,0xa1,0x84,0xac,0x69,0x08,0xc9,0x20,0xd0,0xe4,0xa9,0x00,0x85,0x9d,0x85,0xa2,0x60,0x65,0x92,0x85,0xac,0xa5,0xa1,0x65,0xa9,0x85,0xa1,0xa5,0xa0,0x65,0xa8,0x85,0xa0,0xa5,0x9f,0x65,0xa7,0x85,0x9f,0xa5,0x9e,0x65,0xa6,0x85,0x9e,0x4c,0x37,0x75,0x69,0x01,0x06,0xac,0x26,0xa1,0x26,0xa0,0x26,0x9f,0x26,0x9e,0x10,0xf2,0x38,0xe5,0x9d,0xb0,0xc7,0x49,0xff,0x69,0x01,0x85,0x9d,0x90,0x0e,0xe6,0x9d,0xf0,0x42,0x66,0x9e,0x66,0x9f,0x66,0xa0,0x66,0xa1,0x66,0xac,0x60,0xa5,0xa2,0x49,0xff,0x85,0xa2,0xa5,0x9e,0x49,0xff,0x85,0x9e,0xa5,0x9f,0x49,0xff,0x85,0x9f,0xa5,0xa0,0x49,0xff,0x85,0xa0,0xa5,0xa1,0x49,0xff,0x85,0xa1,0xa5,0xac,0x49,0xff,0x85,0xac,0xe6,0xac,0xd0,0x0e,0xe6,0xa1,0xd0,0x0a,0xe6,0xa0,0xd0,0x06,0xe6,0x9f,0xd0,0x02,0xe6,0x9e,0x60,0xa2,0x28,0x4c,0xc0,0x62,0xa2,0x61,0xb4,0x04,0x84,0xac,0xb4,0x03,0x94,0x04,0xb4,0x02,0x94,0x03,0xb4,0x01,0x94,0x02,0xa4,0xa4,0x94,0x01,0x69,0x08,0x30,0xe8,0xf0,0xe6,0xe9,0x08,0xa8,0xa5,0xac,0xb0,0x14,0x16,0x01,0x90,0x02,0xf6,0x01,0x76,0x01,0x76,0x01,0x76,0x02,0x76,0x03,0x76,0x04,0x6a,0xc8,0xd0,0xec,0x18,0x60,0x81,0x00,0x00,0x00,0x00,0x03,0x7f,0x5e,0x56,0xcb,0x79,0x80,0x13,0x9b,0x0b,0x64,0x80,0x76,0x38,0x93,0x16,0x82,0x38,0xaa,0x3b,0x20,0x80,0x35,0x04,0xf3,0x34,0x81,0x35,0x04,0xf3,0x34,0x80,0x80,0x00,0x00,0x00,0x80,0x31,0x72,0x17,0xf8,0x20,0x27,0x78,0xf0,0x02,0x10,0x03,0x4c,0x18,0x6f,0xa5,0x9d,0xe9,0x7f,0x48,0xa9,0x80,0x85,0x9d,0xa9,0xd7,0xa0,0x75,0x20,0x68,0x74,0xa9,0xdc,0xa0,0x75,0x20,0x0b,0x77,0xa9,0xbd,0xa0,0x75,0x20,0x51,0x74,0xa9,0xc2,0xa0,0x75,0x20,0xfa,0x7b,0xa9,0xe1,0xa0,0x75,0x20,0x68,0x74,0x68,0x20,0x76,0x79,0xa9,0xe6,0xa0,0x75,0x20,0x8b,0x76,0xd0,0x01,0x60,0x20,0xb6,0x76,0xa9,0x00,0x85,0x62,0x85,0x63,0x85,0x64,0x85,0x65,0xa5,0xac,0x20,0x58,0x76,0xa5,0xa1,0x20,0x58,0x76,0xa5,0xa0,0x20,0x58,0x76,0xa5,0x9f,0x20,0x58,0x76,0xa5,0x9e,0x20,0x5d,0x76,0x4c,0x8b,0x77,0xd0,0x03,0x4c,0x84,0x75,0x4a,0x09,0x80,0xa8,0x90,0x19,0x18,0xa5,0x65,0x65,0xa9,0x85,0x65,0xa5,0x64,0x65,0xa8,0x85,0x64,0xa5,0x63,0x65,0xa7,0x85,0x63,0xa5,0x62,0x65,0xa6,0x85,0x62,0x66,0x62,0x66,0x63,0x66,0x64,0x66,0x65,0x66,0xac,0x98,0x4a,0xd0,0xd6,0x60,0x85,0x5e,0x84,0x5f,0xa0,0x04,0xb1,0x5e,0x85,0xa9,0x88,0xb1,0x5e,0x85,0xa8,0x88,0xb1,0x5e,0x85,0xa7,0x88,0xb1,0x5e,0x85,0xaa,0x45,0xa2,0x85,0xab,0xa5,0xaa,0x09,0x80,0x85,0xa6,0x88,0xb1,0x5e,0x85,0xa5,0xa5,0x9d,0x60,0xa5,0xa5,0xf0,0x1c,0x18,0x65,0x9d,0x90,0x04,0x30,0x1a,0x18,0x2c,0x10,0x11,0x69,0x80,0x85,0x9d,0xf0,0x02,0xa5,0xab,0x85,0xa2,0x60,0xa5,0xa2,0x49,0xff,0x30,0x05,0x68,0x68,0x4c,0xf8,0x74,0x4c,0x7f,0x75,0x20,0x08,0x78,0xaa,0xf0,0x10,0x18,0x69,0x02,0xb0,0xf2,0xa2,0x00,0x86,0xab,0x20,0x78,0x74,0xe6,0x9d,0xf0,0xe7,0x60,0x84,0x20,0x00,0x00,0x00,0x20,0x08,0x78,0xa9,0xf5,0xa0,0x76,0xa2,0x00,0x86,0xab,0x20,0x9e,0x77,0x4c,0x0e,0x77,0x20,0x8b,0x76,0xf0,0x76,0x20,0x17,0x78,0xa9,0x00,0x38,0xe5,0x9d,0x85,0x9d,0x20,0xb6,0x76,0xe6,0x9d,0xf0,0xba,0xa2,0xfc,0xa9,0x01,0xa4,0xa6,0xc4,0x9e,0xd0,0x10,0xa4,0xa7,0xc4,0x9f,0xd0,0x0a,0xa4,0xa8,0xc4,0xa0,0xd0,0x04,0xa4,0xa9,0xc4,0xa1,0x08,0x2a,0x90,0x09,0xe8,0x95,0x65,0xf0,0x32,0x10,0x34,0xa9,0x01,0x28,0xb0,0x0e,0x06,0xa9,0x26,0xa8,0x26,0xa7,0x26,0xa6,0xb0,0xe6,0x30,0xce,0x10,0xe2,0xa8,0xa5,0xa9,0xe5,0xa1,0x85,0xa9,0xa5,0xa8,0xe5,0xa0,0x85,0xa8,0xa5,0xa7,0xe5,0x9f,0x85,0xa7,0xa5,0xa6,0xe5,0x9e,0x85,0xa6,0x98,0x4c,0x4b,0x77,0xa9,0x40,0xd0,0xce,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x85,0xac,0x28,0x4c,0x8b,0x77,0xa2,0x53,0x4c,0xc0,0x62,0xa5,0x62,0x85,0x9e,0xa5,0x63,0x85,0x9f,0xa5,0x64,0x85,0xa0,0xa5,0x65,0x85,0xa1,0x4c,0xd8,0x74,0x85,0x5e,0x84,0x5f,0xa0,0x04,0xb1,0x5e,0x85,0xa1,0x88,0xb1,0x5e,0x85,0xa0,0x88,0xb1,0x5e,0x85,0x9f,0x88,0xb1,0x5e,0x85,0xa2,0x09,0x80,0x85,0x9e,0x88,0xb1,0x5e,0x85,0x9d,0x84,0xac,0x60,0xa2,0x98,0x2c,0xa2,0x93,0xa0,0x00,0xf0,0x04,0xa6,0x85,0xa4,0x86,0x20,0x17,0x78,0x86,0x5e,0x84,0x5f,0xa0,0x04,0xa5,0xa1,0x91,0x5e,0x88,0xa5,0xa0,0x91,0x5e,0x88,0xa5,0x9f,0x91,0x5e,0x88,0xa5,0xa2,0x09,0x7f,0x25,0x9e,0x91,0x5e,0x88,0xa5,0x9d,0x91,0x5e,0x84,0xac,0x60,0xa5,0xaa,0x85,0xa2,0xa2,0x05,0xb5,0xa4,0x95,0x9c,0xca,0xd0,0xf9,0x86,0xac,0x60,0x20,0x17,0x78,0xa2,0x06,0xb5,0x9c,0x95,0xa4,0xca,0xd0,0xf9,0x86,0xac,0x60,0xa5,0x9d,0xf0,0xfb,0x06,0xac,0x90,0xf7,0x20,0x70,0x75,0xd0,0xf2,0x4c,0x39,0x75,0xa5,0x9d,0xf0,0x09,0xa5,0xa2,0x2a,0xa9,0xff,0xb0,0x02,0xa9,0x01,0x60,0x20,0x27,0x78,0x85,0x9e,0xa9,0x00,0x85,0x9f,0xa2,0x88,0xa5,0x9e,0x49,0xff,0x2a,0xa9,0x00,0x85,0xa1,0x85,0xa0,0x86,0x9d,0x85,0xac,0x85,0xa2,0x4c,0xd3,0x74,0x46,0xa2,0x60,0x85,0x60,0x84,0x61,0xa0,0x00,0xb1,0x60,0xc8,0xaa,0xf0,0xc4,0xb1,0x60,0x45,0xa2,0x30,0xc2,0xe4,0x9d,0xd0,0x21,0xb1,0x60,0x09,0x80,0xc5,0x9e,0xd0,0x19,0xc8,0xb1,0x60,0xc5,0x9f,0xd0,0x12,0xc8,0xb1,0x60,0xc5,0xa0,0xd0,0x0b,0xc8,0xa9,0x7f,0xc5,0xac,0xb1,0x60,0xe5,0xa1,0xf0,0x25,0x6a,0x45,0xa2,0x4c,0x2d,0x78,0xa5,0x9d,0xf0,0x4a,0x38,0xe9,0xa0,0x24,0xa2,0x10,0x09,0xaa,0xa9,0xff,0x85,0xa4,0x20,0x4e,0x75,0x8a,0xa2,0x9d,0xc9,0xf9,0x10,0x06,0x20,0x9a,0x75,0x84,0xa4,0x60,0xa8,0xa5,0xa2,0x29,0x80,0x46,0x9e,0x05,0x9e,0x85,0x9e,0x20,0xb1,0x75,0x84,0xa4,0x60,0xa5,0x9d,0xc9,0xa0,0xb0,0x20,0x20,0x94,0x78,0x84,0xac,0xa5,0xa2,0x84,0xa2,0x49,0x80,0x2a,0xa9,0xa0,0x85,0x9d,0xa5,0xa1,0x85,0x0d,0x4c,0xd3,0x74,0x85,0x9e,0x85,0x9f,0x85,0xa0,0x85,0xa1,0xa8,0x60,0xa0,0x00,0xa2,0x0a,0x94,0x99,0xca,0x10,0xfb,0x90,0x0f,0xc9,0x2d,0xd0,0x04,0x86,0xa3,0xf0,0x04,0xc9,0x2b,0xd0,0x05,0x20,0xb1,0x00,0x90,0x5b,0xc9,0x2e,0xf0,0x2e,0xc9,0x45,0xd0,0x30,0x20,0xb1,0x00,0x90,0x17,0xc9,0xa8,0xf0,0x0e,0xc9,0x2d,0xf0,0x0a,0xc9,0xa7,0xf0,0x08,0xc9,0x2b,0xf0,0x04,0xd0,0x07,0x66,0x9c,0x20,0xb1,0x00,0x90,0x5b,0x24,0x9c,0x10,0x0e,0xa9,0x00,0x38,0xe5,0x9a,0x4c,0x42,0x79,0x66,0x9b,0x24,0x9b,0x50,0xc3,0xa5,0x9a,0x38,0xe5,0x99,0x85,0x9a,0xf0,0x12,0x10,0x09,0x20,0xfa,0x76,0xe6,0x9a,0xd0,0xf9,0xf0,0x07,0x20,0xde,0x76,0xc6,0x9a,0xd0,0xf9,0xa5,0xa3,0x30,0x01,0x60,0x4c,0x6f,0x7b,0x48,0x24,0x9b,0x10,0x02,0xe6,0x99,0x20,0xde,0x76,0x68,0x29,0x0f,0x20,0x76,0x79,0x4c,0x03,0x79,0x48,0x20,0x08,0x78,0x68,0x20,0x38,0x78,0xa5,0xaa,0x45,0xa2,0x85,0xab,0xa6,0x9d,0x4c,0x6b,0x74,0xa5,0x9a,0xc9,0x0a,0x90,0x09,0xa9,0x64,0x24,0x9c,0x30,0x10,0x4c,0x7f,0x75,0x0a,0x0a,0x18,0x65,0x9a,0x0a,0xa0,0x00,0x71,0xb8,0x38,0xe9,0x30,0x85,0x9a,0x4c,0x29,0x79,0x9b,0x3e,0xbc,0x1f,0xfd,0x9e,0x6e,0x6b,0x27,0xfd,0x9e,0x6e,0x6b,0x28,0x00,0xa9,0x07,0xa0,0x62,0x20,0x0e,0x69,0xa5,0x76,0xa6,0x75,0x85,0x9e,0x86,0x9f,0xa2,0x90,0x38,0x20,0x45,0x78,0x20,0xd4,0x79,0x4c,0x0e,0x69,0xa0,0x01,0xa9,0x2d,0x88,0x24,0xa2,0x10,0x04,0xc8,0x99,0xff,0x00,0x85,0xa2,0x84,0xad,0xc8,0xa9,0x30,0xa6,0x9d,0xd0,0x03,0x4c,0xf7,0x7a,0xa9,0x00,0xe0,0x80,0xf0,0x02,0xb0,0x09,0xa9,0xb4,0xa0,0x79,0x20,0x29,0x76,0xa9,0xf7,0x85,0x99,0xa9,0xaf,0xa0,0x79,0x20,0x57,0x78,0xf0,0x1e,0x10,0x12,0xa9,0xaa,0xa0,0x79,0x20,0x57,0x78,0xf0,0x02,0x10,0x0e,0x20,0xde,0x76,0xc6,0x99,0xd0,0xee,0x20,0xfa,0x76,0xe6,0x99,0xd0,0xdc,0x20,0x4a,0x74,0x20,0x94,0x78,0xa2,0x01,0xa5,0x99,0x18,0x69,0x0a,0x30,0x09,0xc9,0x0b,0xb0,0x06,0x69,0xff,0xaa,0xa9,0x02,0x38,0xe9,0x02,0x85,0x9a,0x86,0x99,0x8a,0xf0,0x02,0x10,0x13,0xa4,0xad,0xa9,0x2e,0xc8,0x99,0xff,0x00,0x8a,0xf0,0x06,0xa9,0x30,0xc8,0x99,0xff,0x00,0x84,0xad,0xa0,0x00,0xa2,0x80,0xa5,0xa1,0x18,0x79,0x0c,0x7b,0x85,0xa1,0xa5,0xa0,0x79,0x0b,0x7b,0x85,0xa0,0xa5,0x9f,0x79,0x0a,0x7b,0x85,0x9f,0xa5,0x9e,0x79,0x09,0x7b,0x85,0x9e,0xe8,0xb0,0x04,0x10,0xde,0x30,0x02,0x30,0xda,0x8a,0x90,0x04,0x49,0xff,0x69,0x0a,0x69,0x2f,0xc8,0xc8,0xc8,0xc8,0x84,0x83,0xa4,0xad,0xc8,0xaa,0x29,0x7f,0x99,0xff,0x00,0xc6,0x99,0xd0,0x06,0xa9,0x2e,0xc8,0x99,0xff,0x00,0x84,0xad,0xa4,0x83,0x8a,0x49,0xff,0x29,0x80,0xaa,0xc0,0x24,0xd0,0xaa,0xa4,0xad,0xb9,0xff,0x00,0x88,0xc9,0x30,0xf0,0xf8,0xc9,0x2e,0xf0,0x01,0xc8,0xa9,0x2b,0xa6,0x9a,0xf0,0x2e,0x10,0x08,0xa9,0x00,0x38,0xe5,0x9a,0xaa,0xa9,0x2d,0x99,0x01,0x01,0xa9,0x45,0x99,0x00,0x01,0x8a,0xa2,0x2f,0x38,0xe8,0xe9,0x0a,0xb0,0xfb,0x69,0x3a,0x99,0x03,0x01,0x8a,0x99,0x02,0x01,0xa9,0x00,0x99,0x04,0x01,0xf0,0x08,0x99,0xff,0x00,0xa9,0x00,0x99,0x00,0x01,0xa9,0x00,0xa0,0x01,0x60,0x80,0x00,0x00,0x00,0x00,0xfa,0x0a,0x1f,0x00,0x00,0x98,0x96,0x80,0xff,0xf0,0xbd,0xc0,0x00,0x01,0x86,0xa0,0xff,0xff,0xd8,0xf0,0x00,0x00,0x03,0xe8,0xff,0xff,0xff,0x9c,0x00,0x00,0x00,0x0a,0xff,0xff,0xff,0xff,0x20,0x08,0x78,0xa9,0x04,0xa0,0x7b,0x20,0x9e,0x77,0xf0,0x6f,0xa5,0xa5,0xd0,0x03,0x4c,0xfa,0x74,0xa2,0x8a,0xa0,0x00,0x20,0xd0,0x77,0xa5,0xaa,0x10,0x0f,0x20,0xc5,0x78,0xa9,0x8a,0xa0,0x00,0x20,0x57,0x78,0xd0,0x03,0x98,0xa4,0x0d,0x20,0xfa,0x77,0x98,0x48,0x20,0xeb,0x75,0xa9,0x8a,0xa0,0x00,0x20,0x29,0x76,0x20,0xa8,0x7b,0x68,0x10,0x0a,0xa5,0x9d,0xf0,0x06,0xa5,0xa2,0x49,0xff,0x85,0xa2,0x60,0x81,0x38,0xaa,0x3b,0x29,0x07,0x71,0x34,0x58,0x3e,0x56,0x74,0x16,0x7e,0xb3,0x1b,0x77,0x2f,0xee,0xe3,0x85,0x7a,0x1d,0x84,0x1c,0x2a,0x7c,0x63,0x59,0x58,0x0a,0x7e,0x75,0xfd,0xe7,0xc6,0x80,0x31,0x72,0x18,0x10,0x81,0x00,0x00,0x00,0x00,0xa9,0x7a,0xa0,0x7b,0x20,0x29,0x76,0xa5,0xac,0x69,0x50,0x90,0x03,0x20,0x1f,0x78,0x85,0x92,0x20,0x0b,0x78,0xa5,0x9d,0xc9,0x88,0x90,0x03,0x20,0xd0,0x76,0x20,0xc5,0x78,0xa5,0x0d,0x18,0x69,0x81,0xf0,0xf3,0x38,0xe9,0x01,0x48,0xa2,0x05,0xb5,0xa5,0xb4,0x9d,0x95,0x9d,0x94,0xa5,0xca,0x10,0xf5,0xa5,0x92,0x85,0xac,0x20,0x54,0x74,0x20,0x6f,0x7b,0xa9,0x7f,0xa0,0x7b,0x20,0x10,0x7c,0xa9,0x00,0x85,0xab,0x68,0x4c,0xb8,0x76,0x85,0xad,0x84,0xae,0x20,0xc6,0x77,0xa9,0x93,0x20,0x29,0x76,0x20,0x14,0x7c,0xa9,0x93,0xa0,0x00,0x4c,0x29,0x76,0x85,0xad,0x84,0xae,0x20,0xc3,0x77,0xb1,0xad,0x85,0xa3,0xa4,0xad,0xc8,0x98,0xd0,0x02,0xe6,0xae,0x85,0xad,0xa4,0xae,0x20,0x29,0x76,0xa5,0xad,0xa4,0xae,0x18,0x69,0x05,0x90,0x01,0xc8,0x85,0xad,0x84,0xae,0x20,0x68,0x74,0xa9,0x98,0xa0,0x00,0xc6,0xa3,0xd0,0xe4,0x60,0x98,0x35,0x44,0x7a,0x68,0x28,0xb1,0x46,0x20,0x27,0x78,0xaa,0x30,0x18,0xa9,0xc9,0xa0,0x00,0x20,0x9e,0x77,0x8a,0xf0,0xe7,0xa9,0x44,0xa0,0x7c,0x20,0x29,0x76,0xa9,0x48,0xa0,0x7c,0x20,0x68,0x74,0xa6,0xa1,0xa5,0x9e,0x85,0xa1,0x86,0x9e,0xa9,0x00,0x85,0xa2,0xa5,0x9d,0x85,0xac,0xa9,0x80,0x85,0x9d,0x20,0xd8,0x74,0xa2,0xc9,0xa0,0x00,0x4c,0xd0,0x77,0xe6,0xb8,0xd0,0x02,0xe6,0xb9,0xad,0x60,0xea,0xc9,0x3a,0xb0,0x0a,0xc9,0x20,0xf0,0xef,0x38,0xe9,0x30,0x38,0xe9,0xd0,0x60,0x80,0x4f,0xc7,0x52,0x58,0xa2,0xff,0x86,0x76,0xa2,0xfb,0x9a,0xa9,0xa5,0xa0,0x7c,0x85,0x01,0x84,0x02,0x85,0x04,0x84,0x05,0xa9,0x4c,0x85,0x00,0x85,0x03,0x85,0x90,0xa2,0x1c,0xbd,0x87,0x7c,0x95,0xb0,0xca,0xd0,0xf8,0x8a,0x85,0xa4,0x85,0x54,0x48,0xa9,0x03,0x85,0x8f,0x20,0x14,0x7e,0xa9,0x01,0x8d,0xfd,0x01,0x8d,0xfc,0x01,0xa2,0x55,0x86,0x52,0xa0,0x00,0xa9,0x60,0x84,0x73,0x85,0x74,0x84,0x6f,0x85,0x70,0xa2,0x00,0xa0,0x08,0x86,0x67,0x84,0x68,0xa0,0x00,0x84,0xd6,0x98,0x91,0x67,0xe6,0x67,0xd0,0x02,0xe6,0x68,0xa5,0x67,0xa4,0x68,0x20,0x91,0x62,0x20,0xd2,0x64,0xa9,0x0e,0xa0,0x69,0x85,0x04,0x84,0x05,0xa9,0xea,0xa0,0x62,0x85,0x01,0x84,0x02,0x6c,0x01,0x00,0x20,0x17,0x6b,0x20,0x18,0x74,0x6c,0x50,0x00,0x20,0x17,0x6b,0x20,0x18,0x74,0xa5,0x50,0xc5,0x6d,0xa5,0x51,0xe5,0x6e,0xb0,0x03,0x4c,0xbe,0x62,0xa5,0x50,0x85,0x73,0x85,0x6f,0xa5,0x51,0x85,0x74,0x85,0x70,0x60,0x20,0x17,0x6b,0x20,0x18,0x74,0xa5,0x50,0xc5,0x73,0xa5,0x51,0xe5,0x74,0xb0,0xe0,0xa5,0x50,0xc5,0x69,0xa5,0x51,0xe5,0x6a,0x90,0xd6,0xa5,0x50,0x85,0x69,0xa5,0x51,0x85,0x6a,0x4c,0xf3,0x64,0xa9,0x8e,0x20,0x69,0x6c,0xa5,0xb8,0x85,0xf4,0xa5,0xb9,0x85,0xf5,0x38,0x66,0xd8,0xa5,0x75,0x85,0xf6,0xa5,0x76,0x85,0xf7,0x20,0xa2,0x67,0x4c,0x94,0x67,0x86,0xde,0xa6,0xf8,0x86,0xdf,0xa5,0x75,0x85,0xda,0xa5,0x76,0x85,0xdb,0xa5,0x79,0x85,0xdc,0xa5,0x7a,0x85,0xdd,0xa5,0xf4,0x85,0xb8,0xa5,0xf5,0x85,0xb9,0xa5,0xf6,0x85,0x75,0xa5,0xf7,0x85,0x76,0x20,0xb7,0x00,0x20,0x3a,0x67,0x4c,0x48,0x66,0xa5,0xda,0x85,0x75,0xa5,0xdb,0x85,0x76,0xa5,0xdc,0x85,0xb8,0xa5,0xdd,0x85,0xb9,0xa6,0xdf,0x9a,0x4c,0x48,0x66,0xad,0x11,0xd0,0x10,0xfb,0xad,0x10,0xd0,0x29,0x7f,0x60,0xc9,0x18,0xf0,0x0a,0x20,0xef,0xff,0xc9,0x5f,0xf0,0x0e,0xe8,0xd0,0x0f,0x20,0x08,0x7e,0x20,0x14,0x7e,0x20,0x0b,0x7e,0xa2,0x01,0x8a,0xf0,0xf5,0xca,0x20,0xd2,0x7d,0x9d,0x00,0x02,0xc9,0x0d,0xd0,0xd9,0x20,0x14,0x7e,0x60,0xa9,0x5c,0x2c,0xa5,0x33,0x2c,0xa9,0x20,0x2c,0xa9,0x3f,0x2c,0xa9,0x0d,0x09,0x80,0x20,0xef,0xff,0x29,0x7f,0x60,0xa0,0x18,0x20,0x14,0x7e,0x88,0x10,0xfa,0x60,0xac,0xdc,0xaf,0xc0,0xcf,0xd0,0x5b,0xac,0xdd,0xaf,0xc0,0xfa,0xd0,0x54,0x60,0x20,0x27,0x7e,0x4c,0x06,0x90,0x20,0x27,0x7e,0xa0,0x00,0xb9,0x00,0x00,0x99,0x80,0x03,0xc8,0xc0,0x0c,0xd0,0xf5,0xc6,0xb8,0xa0,0x00,0x20,0xb1,0x00,0xf0,0x08,0x99,0xc1,0x03,0xc8,0xc0,0x0f,0xd0,0xf3,0xc0,0x00,0xf0,0x2b,0x8c,0xc0,0x03,0xa9,0xc0,0xa0,0x03,0x85,0x02,0x84,0x03,0xa5,0xaf,0xe5,0x67,0x85,0x09,0xa5,0xb0,0xe5,0x68,0x85,0x0a,0xa5,0x67,0xa4,0x68,0x85,0x00,0x85,0x07,0x84,0x01,0x84,0x08,0xa9,0xf8,0x85,0x06,0x60,0xa2,0x8c,0x2c,0xa2,0x06,0x4c,0xc0,0x62,0xa0,0x00,0xb9,0x80,0x03,0x99,0x00,0x00,0xc8,0xc0,0x0c,0xd0,0xf5,0x60,0x20,0x3c,0x7e,0xa2,0x20,0x20,0xc5,0x7e,0x20,0x91,0x7e,0x60,0x20,0x3c,0x7e,0xa2,0x22,0x20,0xc5,0x7e,0xa5,0x67,0x65,0x09,0x85,0x69,0xa5,0x68,0x65,0x0a,0x85,0x6a,0x20,0x91,0x7e,0x4c,0xa0,0x63,0x20,0x0c,0x90,0xa2,0x04,0xb0,0xf9,0x60};

////////////////////////////////////////////////////////////////////
// 6821 Peripheral
// emulate just enough so keyboard/display works thru serial port.
////////////////////////////////////////////////////////////////////
//

#define KBD   0xd010
#define KBDCR 0xd011
#define DSP   0xd012
#define DSPCR 0xd013
byte regKBD;
byte regKBDDIR;    // Dir register when KBDCR.bit2 == 0
byte regKBDCR;
byte regDSP;
byte regDSPDIR;    // Dir register when DSPCR.bit2 == 0
byte regDSPCR;


////////////////////////////////////////////////////////////////////
// 65c02 Processor Control
////////////////////////////////////////////////////////////////////
//

/* Digital Pin Assignments */
#define DATA_OUT PORTL
#define DATA_IN  PINL
#define ADDR_H   PINC
#define ADDR_L   PINA
#define ADDR     ((unsigned int) (ADDR_H << 8 | ADDR_L))

#define uP_RESET_N  38
#define uP_RW_N     40
#define uP_RDY      39
#define uP_SO_N     41
#define uP_IRQ_N    50
#define uP_NMI_N    51
#define uP_E        52
#define uP_GPIO     53

// Fast routines to drive clock signals high/low; faster than digitalWrite
// required to meet >100kHz clock freq for 6809e.
// 6502 & z80 do not have this requirement.
//
#define CLK_Q_HIGH  (PORTB = PORTB | 0x01)
#define CLK_Q_LOW   (PORTB = PORTB & 0xFE)
#define CLK_E_HIGH  (PORTB = PORTB | 0x02)
#define CLK_E_LOW   (PORTB = PORTB & 0xFC)
#define STATE_RW_N  (PING & 0x02)

#define DIR_IN  0x00
#define DIR_OUT 0xFF
#define DATA_DIR   DDRL
#define ADDR_H_DIR DDRC
#define ADDR_L_DIR DDRA

unsigned long clock_cycle_count;
unsigned long clock_cycle_last;
unsigned long uP_start_millis;
unsigned long uP_stop_millis;
unsigned long uP_millis_last;
unsigned int  uP_ADDR;
byte uP_DATA;

void uP_assert_reset()
{
  // Drive RESET conditions
  digitalWrite(uP_RESET_N, LOW);
  digitalWrite(uP_IRQ_N, HIGH);
  digitalWrite(uP_NMI_N, HIGH);
  digitalWrite(uP_RDY, HIGH);
  digitalWrite(uP_SO_N, HIGH);
}

void uP_release_reset()
{
  // Drive RESET conditions
  digitalWrite(uP_RESET_N, HIGH);
}

void uP_init()
{
  // Set directions
  DATA_DIR = DIR_IN;
  ADDR_H_DIR = DIR_IN;
  ADDR_L_DIR = DIR_IN;
  pinMode(uP_RESET_N, OUTPUT);
  pinMode(uP_RW_N,    INPUT);
  pinMode(uP_RDY,     OUTPUT);
  pinMode(uP_SO_N,    OUTPUT);
  pinMode(uP_IRQ_N,   OUTPUT);
  pinMode(uP_NMI_N,   OUTPUT);
  pinMode(uP_E,       OUTPUT);
  pinMode(uP_GPIO,    OUTPUT);
  
  uP_assert_reset();
  digitalWrite(uP_E, LOW);
  digitalWrite(uP_GPIO, LOW);
  
  clock_cycle_count = 0;
  clock_cycle_last  = 0;
  uP_start_millis = millis();
}

void m6821_init()
{
  regKBD    = 0x00;
  regKBDDIR = 0x00;
  regKBDCR  = 0x00;
  regDSP    = 0x00;
  regDSPDIR = 0x00;
  regDSPCR  = 0x00;
}

////////////////////////////////////////////////////////////////////
// Processor Control Loop
////////////////////////////////////////////////////////////////////
// This is where the action is.
// it reads processor control signals and acts accordingly.
//

inline __attribute__((always_inline))
void cpu_tick()
{ 
  int ch;
  
  CLK_E_HIGH;    // E goes high   // digitalWrite(uP_E, HIGH);
  
  uP_ADDR = ADDR;
    
  if (STATE_RW_N)	  
  //////////////////////////////////////////////////////////////////
  // HIGH = READ
  {
    // change DATA port to output to uP:
    DATA_DIR = DIR_OUT;
    
    // ROM?
    if ( (ROM_START <= uP_ADDR) && (uP_ADDR <= ROM_END) )
      DATA_OUT = pgm_read_byte_near(rom_bin + (uP_ADDR - ROM_START));
    else
    if ( (BASIC_START <= uP_ADDR) && (uP_ADDR <= BASIC_END) )
      DATA_OUT = pgm_read_byte_near(basic_bin + (uP_ADDR - BASIC_START));
    else
    // RAM?
    if ( (uP_ADDR <= RAM_END) && (RAM_START <= uP_ADDR) )
      // Use Arduino RAM for stack/important stuff
      DATA_OUT = RAM[uP_ADDR - RAM_START];
    else
    // 6821?
    if ( KBD <=uP_ADDR && uP_ADDR <= DSPCR )   
    {      
      // KBD?
      if (uP_ADDR == KBD)
      {
        if (regKBDCR & 0x02)
          // KBD register  
          {
            DATA_OUT = regKBD;
            regKBDCR = regKBDCR & 0x7F;    // clear IRQA bit upon read
          }
        else
          DATA_OUT = regKBDDIR;
      }
      else
      // KBDCR?
      if (uP_ADDR == KBDCR)
      {
        // KBDCR register
        DATA_OUT = regKBDCR;  
      }
      else
      // DSP?
      if (uP_ADDR == DSP)
      {
        if (regDSPCR & 0x02) 
          // DSP register  
          {
            DATA_OUT = regDSP;
            regDSPCR = regDSPCR & 0x7F;    // clear IRQA bit upon read
          }
        else
          DATA_OUT = regDSPDIR;
      }
      else
      // DSPCR?
      if (uP_ADDR == DSPCR)
      {
        // DSPCR register
        DATA_OUT = regDSPCR;  
      }   
      
    }
#if (USE_SPI_RAM)
    else
    {
      //treat everywhere else as ram
      DATA_OUT = cache_read_byte(uP_ADDR);
      // DATA_OUT = spi_read_byte_quad(0, uP_ADDR);
    }
#endif

#if outputDEBUG
//    if (outputDEBUG)
//    {
      char tmp[20];
      sprintf(tmp, "-- A=%0.4X D=%0.2X\n", uP_ADDR, DATA_OUT);
      Serial.write(tmp);
//    }
#endif

  } 
  else 
  //////////////////////////////////////////////////////////////////
  // R/W = LOW = WRITE
  {
    // RAM?
    if ( (uP_ADDR <= RAM_END) && (RAM_START <= uP_ADDR) )
      // Use Arduino RAM for stack/important stuff
      RAM[uP_ADDR - RAM_START] = DATA_IN;
    else
    // 6821?
    if ( KBD <=uP_ADDR && uP_ADDR <= DSPCR )
    {
      // KBD?
      if (uP_ADDR == KBD)
      {
        if (regKBDCR & 0x02)
          // KBD register
          {  
            regKBD = DATA_IN;
          }
        else
          regKBDDIR = DATA_IN;
      }
      else
      // KBDCR?
      if (uP_ADDR == KBDCR)
      {
        // KBDCR register
        regKBDCR = DATA_IN & 0X7F;  
      }
      else
      // DSP?
      if (uP_ADDR == DSP)
      {
        if (regDSPCR & 0x02)
          // DSP register
          if (DATA_IN == 0x8D)
            Serial.write("\r\n");    // send CR / LF
          else
            Serial.write(regDSP = DATA_IN & 0x7F);
        else
          regDSPDIR = DATA_IN;  
      }
      else
      // DSPCR?
      if (uP_ADDR == DSPCR)
      {
        // DSPCR register
        regDSPCR = DATA_IN;  
      }
    }
#if (USE_SPI_RAM)
    else
    {
      // treat everywhere else as ram
      cache_write_byte(uP_ADDR, DATA_IN);
      // spi_write_byte_quad(0, uP_ADDR, DATA_IN);
    }    
#endif

#if outputDEBUG
//    if (outputDEBUG)
//    {
      char tmp[20];
      sprintf(tmp, "WR A=%0.4X D=%0.2X\n", uP_ADDR, DATA_IN);
      Serial.write(tmp);
//    }
#endif
  }

  //////////////////////////////////////////////////////////////////
  // one full cycle complete
  clock_cycle_count ++;

  // start next cycle
  CLK_E_LOW;    // E goes low

  // natural delay for DATA Hold time (t_HR)
  DATA_DIR = DIR_IN;
}

////////////////////////////////////////////////////////////////////
// Serial Event
////////////////////////////////////////////////////////////////////

/*
  SerialEvent occurs whenever a new data comes in the
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
inline __attribute__((always_inline))
void serialEvent0() 
{
  if (Serial.available())
    if ((regKBDCR & 0x80) == 0x00)      // read serial byte only if we can set 6821 interrupt
    {
      cli();                            // stop interrupts while changing 6821 guts.
      // 6821 portA is available      
      int ch = toupper( Serial.read() );    // apple1 expects upper case
      regKBD = ch | 0x80;               // apple1 expects bit 7 set for incoming characters.
      regKBDCR = regKBDCR | 0x80;       // set 6821 interrupt
      sei();
    }
  return;
}


////////////////////////////////////////////////////////////////////
// LCD/Keyboard functions
////////////////////////////////////////////////////////////////////

#if (USE_LCD_KEYPAD)

////////////////////////////////////////////////////////////////////
// int getKey() - LCD/Keyboard function from vendor
////////////////////////////////////////////////////////////////////

int getKey()
{
  key = get_key2();
  if (key != oldkey)
    {
      delay(BTN_DEBOUNCE);
      key = get_key2();
      if (key != oldkey) {
        oldkey = key;
        if (key == -1)
          BTN_RELEASE = 1;
        else
          BTN_PRESS = 1;
      }
    } else {
      BTN_PRESS = 0;
      BTN_RELEASE = 0;
    }
  return (key != -1);
}

int get_key2()
{
  int k;
  int adc_key_in;

  adc_key_in = analogRead( LCD_BTN );
  for( k = 0; k < NUM_KEYS; k++ )
  {
    if ( adc_key_in < adc_key_val[k] )
    {
      return k;
    }
  }
  if ( k >= NUM_KEYS )
    k = -1;
  return k;
}

////////////////////////////////////////////////////////////////////
// Button Press Callbacks - LCD/Keyboard function from vendor
////////////////////////////////////////////////////////////////////

void btn_Pressed_Select()
{
  // toggle LCD brightness
  analogWrite(LCD_BL, (backlightSet = (25 + backlightSet) % 100) );
}

void btn_Pressed_Left()
{
  // Serial.println("Left.");
  digitalWrite(uP_NMI_N, LOW);
}

void btn_Pressed_Right()
{
  // Serial.println("Right.");
  digitalWrite(uP_NMI_N, HIGH);
}

void btn_Pressed_Up()
{
  // Serial.println("Up.");
  
  // release uP_RESET
  digitalWrite(uP_RESET_N, HIGH);
}

void btn_Pressed_Down()
{
  // Serial.println("Down.");
  
  // assert uP_RESET
  digitalWrite(uP_RESET_N, LOW);
  
  // flush serial port
  while (Serial.available() > 0)
    Serial.read();
}

void process_lcdkeypad()
{
  // Handle key presses
  //
  if ( getKey() ) {
    // button pressed
    if ( BTN_PRESS ) {
      if (key == BTN_SELECT) btn_Pressed_Select();
      if (key == BTN_UP)     btn_Pressed_Up();
      if (key == BTN_DOWN)   btn_Pressed_Down();
      if (key == BTN_LEFT)   btn_Pressed_Left();
      if (key == BTN_RIGHT)  btn_Pressed_Right();      
    }
  } else
   // display processor info & performance
   // if (clock_cycle_count % 10 == 0) 
  {
    char tmp[20];
    float freq;
    
    lcd.setCursor(0, 0);
    // lcd.print(clock_cycle_count);
    sprintf(tmp, "A=%0.4X D=%0.2X", uP_ADDR, DATA_OUT);
    lcd.print(tmp);
    lcd.setCursor(0,1);
    
    freq = (float) (clock_cycle_count - clock_cycle_last) / (millis() - uP_millis_last + 1);
    lcd.print(freq);  lcd.print(" kHz   Z80");
    clock_cycle_last = clock_cycle_count;
    uP_millis_last = millis();
  }
}
#endif

////////////////////////////////////////////////////////////////////
// Setup
////////////////////////////////////////////////////////////////////

void setup() 
{
  Serial.begin(115200);

  Serial.write(27);       // ESC command
  Serial.print("[2J");    // clear screen command
  Serial.write(27);
  Serial.print("[H");
  Serial.println("\n");
  Serial.println("Configuration:");
  Serial.println("==============");
  Serial.print("Debug:      "); Serial.println(outputDEBUG, HEX);
  Serial.print("LCD-DISP:   "); Serial.println(USE_LCD_KEYPAD, HEX); 
  Serial.print("SPI-RAM:    "); Serial.print(USE_SPI_RAM * 65536, DEC); Serial.println(" Bytes");
  Serial.print("SRAM Size:  "); Serial.print(RAM_END - RAM_START + 1, DEC); Serial.println(" Bytes");
  Serial.print("SRAM_START: 0x"); Serial.println(RAM_START, HEX); 
  Serial.print("SRAM_END:   0x"); Serial.println(RAM_END, HEX); 

#if (USE_LCD_KEYPAD)
  {
    pinMode(LCD_BL, OUTPUT);
    analogWrite(LCD_BL, backlightSet);  
    lcd.begin(16, 2);
  }
#endif

#if (USE_SPI_RAM)
  // Initialize memory subsystem
  spi_init();
  cache_init();
#endif

  // Initialize processor GPIO's
  uP_init();
  m6821_init();
  
  // Reset processor for 25 cycles
  uP_assert_reset();
  for(int i=0; i<250; i++) cpu_tick();
  uP_release_reset();

  Serial.println("\n");
}


////////////////////////////////////////////////////////////////////
// Loop()
////////////////////////////////////////////////////////////////////

void loop()
{
  word i = 0;
  byte j = 0;
  
  // Loop forever
  //  
  while(1)
  {
    serialEvent0();
    cpu_tick();
    
    // delay(500);
    // execute lcdkeypad() when word i overflows (simple counter)
#if USE_LCD_KEYPAD
    if (i++ == 0) process_lcdkeypad();
#endif
  }
}
